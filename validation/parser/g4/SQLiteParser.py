# Generated from g4/SQLite.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009f")
        buf.write("\u06e7\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\3\2\3\2\7\2\u00ed\n\2\f\2")
        buf.write("\16\2\u00f0\13\2\3\2\3\2\3\3\3\3\3\3\3\4\7\4\u00f8\n\4")
        buf.write("\f\4\16\4\u00fb\13\4\3\4\3\4\6\4\u00ff\n\4\r\4\16\4\u0100")
        buf.write("\3\4\7\4\u0104\n\4\f\4\16\4\u0107\13\4\3\4\7\4\u010a\n")
        buf.write("\4\f\4\16\4\u010d\13\4\3\5\3\5\3\5\5\5\u0112\n\5\5\5\u0114")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u0134\n\5\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u013b\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0143\n\6\3\6\5")
        buf.write("\6\u0146\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u014f\n\7")
        buf.write("\3\b\3\b\5\b\u0153\n\b\3\b\3\b\3\b\3\b\3\t\3\t\5\t\u015b")
        buf.write("\n\t\3\t\3\t\5\t\u015f\n\t\5\t\u0161\n\t\3\n\3\n\3\n\5")
        buf.write("\n\u0166\n\n\5\n\u0168\n\n\3\13\3\13\5\13\u016c\n\13\3")
        buf.write("\13\3\13\3\13\7\13\u0171\n\13\f\13\16\13\u0174\13\13\5")
        buf.write("\13\u0176\n\13\3\13\3\13\3\13\5\13\u017b\n\13\3\13\3\13")
        buf.write("\5\13\u017f\n\13\3\13\6\13\u0182\n\13\r\13\16\13\u0183")
        buf.write("\3\13\5\13\u0187\n\13\3\13\5\13\u018a\n\13\3\f\3\f\5\f")
        buf.write("\u018e\n\f\3\f\3\f\3\f\3\f\5\f\u0194\n\f\3\f\3\f\3\f\5")
        buf.write("\f\u0199\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u01a2\n\f")
        buf.write("\f\f\16\f\u01a5\13\f\3\f\3\f\5\f\u01a9\n\f\3\r\3\r\5\r")
        buf.write("\u01ad\n\r\3\r\3\r\3\r\3\r\5\r\u01b3\n\r\3\r\3\r\3\r\5")
        buf.write("\r\u01b8\n\r\3\r\3\r\3\r\3\r\3\r\7\r\u01bf\n\r\f\r\16")
        buf.write("\r\u01c2\13\r\3\r\3\r\7\r\u01c6\n\r\f\r\16\r\u01c9\13")
        buf.write("\r\3\r\3\r\3\r\5\r\u01ce\n\r\3\r\3\r\5\r\u01d2\n\r\3\16")
        buf.write("\3\16\5\16\u01d6\n\16\3\16\3\16\3\16\3\16\5\16\u01dc\n")
        buf.write("\16\3\16\3\16\3\16\5\16\u01e1\n\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u01e8\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\7\16\u01f1\n\16\f\16\16\16\u01f4\13\16\5\16\u01f6")
        buf.write("\n\16\5\16\u01f8\n\16\3\16\3\16\3\16\3\16\5\16\u01fe\n")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u0204\n\16\3\16\3\16\5\16")
        buf.write("\u0208\n\16\3\16\3\16\3\16\3\16\3\16\5\16\u020f\n\16\3")
        buf.write("\16\3\16\6\16\u0213\n\16\r\16\16\16\u0214\3\16\3\16\3")
        buf.write("\17\3\17\5\17\u021b\n\17\3\17\3\17\3\17\3\17\5\17\u0221")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u0226\n\17\3\17\3\17\3\17\3")
        buf.write("\17\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0232\n\20\3\20")
        buf.write("\3\20\3\20\5\20\u0237\n\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\7\20\u0240\n\20\f\20\16\20\u0243\13\20\3\20\3")
        buf.write("\20\5\20\u0247\n\20\3\21\5\21\u024a\n\21\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u0250\n\21\3\22\5\22\u0253\n\22\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u0259\n\22\3\22\5\22\u025c\n\22\3\22\5\22")
        buf.write("\u025f\n\22\3\23\3\23\5\23\u0263\n\23\3\23\3\23\3\24\3")
        buf.write("\24\3\24\3\24\5\24\u026b\n\24\3\24\3\24\3\24\5\24\u0270")
        buf.write("\n\24\3\24\3\24\3\25\3\25\3\25\3\25\5\25\u0278\n\25\3")
        buf.write("\25\3\25\3\25\5\25\u027d\n\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u0285\n\26\3\26\3\26\3\26\5\26\u028a\n\26\3")
        buf.write("\26\3\26\3\27\3\27\3\27\3\27\5\27\u0292\n\27\3\27\3\27")
        buf.write("\3\27\5\27\u0297\n\27\3\27\3\27\3\30\3\30\5\30\u029d\n")
        buf.write("\30\3\30\3\30\3\30\7\30\u02a2\n\30\f\30\16\30\u02a5\13")
        buf.write("\30\5\30\u02a7\n\30\3\30\3\30\3\30\3\30\7\30\u02ad\n\30")
        buf.write("\f\30\16\30\u02b0\13\30\3\30\5\30\u02b3\n\30\3\30\5\30")
        buf.write("\u02b6\n\30\3\31\5\31\u02b9\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u02cc\n\31\3\31\3\31\3\31\3\31\5\31\u02d2")
        buf.write("\n\31\3\31\3\31\3\31\3\31\3\31\7\31\u02d9\n\31\f\31\16")
        buf.write("\31\u02dc\13\31\3\31\3\31\5\31\u02e0\n\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\7\31\u02e7\n\31\f\31\16\31\u02ea\13\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\7\31\u02f2\n\31\f\31\16\31")
        buf.write("\u02f5\13\31\3\31\3\31\7\31\u02f9\n\31\f\31\16\31\u02fc")
        buf.write("\13\31\3\31\3\31\3\31\5\31\u0301\n\31\3\32\3\32\3\32\3")
        buf.write("\32\5\32\u0307\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\5\32\u0310\n\32\3\33\3\33\3\33\3\33\3\33\5\33\u0317\n")
        buf.write("\33\3\33\3\33\5\33\u031b\n\33\5\33\u031d\n\33\3\34\3\34")
        buf.write("\5\34\u0321\n\34\3\34\3\34\3\35\3\35\3\35\5\35\u0328\n")
        buf.write("\35\5\35\u032a\n\35\3\35\3\35\5\35\u032e\n\35\3\35\5\35")
        buf.write("\u0331\n\35\3\36\3\36\3\36\3\37\3\37\5\37\u0338\n\37\3")
        buf.write("\37\3\37\3\37\7\37\u033d\n\37\f\37\16\37\u0340\13\37\5")
        buf.write("\37\u0342\n\37\3\37\3\37\5\37\u0346\n\37\3\37\5\37\u0349")
        buf.write("\n\37\3 \3 \5 \u034d\n \3 \3 \3 \7 \u0352\n \f \16 \u0355")
        buf.write("\13 \5 \u0357\n \3 \3 \3 \3 \7 \u035d\n \f \16 \u0360")
        buf.write("\13 \3 \5 \u0363\n \3 \5 \u0366\n \3!\3!\5!\u036a\n!\3")
        buf.write("!\5!\u036d\n!\3!\5!\u0370\n!\3!\3!\3!\3!\3!\7!\u0377\n")
        buf.write("!\f!\16!\u037a\13!\3!\3!\3!\3!\3!\3!\7!\u0382\n!\f!\16")
        buf.write("!\u0385\13!\3!\3!\7!\u0389\n!\f!\16!\u038c\13!\5!\u038e")
        buf.write('\n!\3"\5"\u0391\n"\3"\3"\3"\3"\3"\3"\3"\3"')
        buf.write('\3"\3"\3"\5"\u039e\n"\3"\3"\3"\3"\3"\3"\3"')
        buf.write('\3"\3"\3"\7"\u03aa\n"\f"\16"\u03ad\13"\3"\5"')
        buf.write('\u03b0\n"\3#\5#\u03b3\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3')
        buf.write("#\3#\5#\u03c0\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\7#\u03cc")
        buf.write("\n#\f#\16#\u03cf\13#\3#\5#\u03d2\n#\3#\5#\u03d5\n#\3#")
        buf.write("\5#\u03d8\n#\3$\3$\3%\3%\5%\u03de\n%\3%\7%\u03e1\n%\f")
        buf.write("%\16%\u03e4\13%\3&\6&\u03e7\n&\r&\16&\u03e8\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\5&\u03f5\n&\3'\3'\5'\u03f9\n'")
        buf.write("\3'\3'\3'\3'\5'\u03ff\n'\3'\3'\5'\u0403\n'\3")
        buf.write("'\5'\u0406\n'\3'\3'\3'\3'\3'\3'\3'\3'\3'\3")
        buf.write("'\3'\3'\3'\3'\3'\3'\5'\u0418\n'\3'\3'\3'\5")
        buf.write("'\u041d\n'\3(\3(\3(\5(\u0422\n(\3)\3)\3)\3)\3)\3)\5")
        buf.write(")\u042a\n)\3)\3)\3)\5)\u042f\n)\3)\3)\3)\3)\3)\3)\3)\5")
        buf.write(")\u0438\n)\3)\3)\3)\7)\u043d\n)\f)\16)\u0440\13)\3)\5")
        buf.write(")\u0443\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5")
        buf.write(")\u0453\n)\3)\5)\u0456\n)\3)\3)\3)\3)\3)\3)\5)\u045e\n")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u046d\n)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u047b\n)\3)\3)\3")
        buf.write(")\3)\5)\u0481\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5")
        buf.write(")\u048f\n)\3)\3)\3)\5)\u0494\n)\3)\3)\5)\u0498\n)\3)\3")
        buf.write(")\3)\3)\5)\u049e\n)\3)\3)\3)\3)\3)\3)\5)\u04a6\n)\3)\3")
        buf.write(")\5)\u04aa\n)\3)\3)\3)\3)\3)\3)\7)\u04b2\n)\f)\16)\u04b5")
        buf.write("\13)\5)\u04b7\n)\3)\3)\3)\3)\5)\u04bd\n)\3)\5)\u04c0\n")
        buf.write(")\7)\u04c2\n)\f)\16)\u04c5\13)\3*\3*\3*\3*\3*\3*\7*\u04cd")
        buf.write("\n*\f*\16*\u04d0\13*\3*\3*\5*\u04d4\n*\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3*\3*\3*\5*\u04e0\n*\3*\3*\5*\u04e4\n*\7*\u04e6")
        buf.write("\n*\f*\16*\u04e9\13*\3*\5*\u04ec\n*\3*\3*\3*\3*\3*\5*")
        buf.write("\u04f3\n*\5*\u04f5\n*\3+\3+\3+\3+\3+\3+\5+\u04fd\n+\3")
        buf.write("+\3+\3,\3,\3,\5,\u0504\n,\3,\3,\5,\u0508\n,\3-\3-\5-\u050c")
        buf.write("\n-\3-\3-\3-\5-\u0511\n-\3-\3-\3-\3-\7-\u0517\n-\f-\16")
        buf.write("-\u051a\13-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-")
        buf.write("\7-\u052a\n-\f-\16-\u052d\13-\3-\3-\3-\5-\u0532\n-\3.")
        buf.write("\3.\5.\u0536\n.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\7")
        buf.write(".\u0544\n.\f.\16.\u0547\13.\3/\3/\3/\5/\u054c\n/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\5/\u0555\n/\3\60\3\60\3\60\5\60\u055a")
        buf.write("\n\60\3\60\3\60\5\60\u055e\n\60\3\61\3\61\3\61\5\61\u0563")
        buf.write("\n\61\3\62\3\62\3\62\3\62\3\62\7\62\u056a\n\62\f\62\16")
        buf.write("\62\u056d\13\62\3\62\3\62\5\62\u0571\n\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u057f\n\63\3\63\5\63\u0582\n\63\5\63\u0584\n\63\3\64")
        buf.write("\3\64\3\64\5\64\u0589\n\64\3\64\3\64\5\64\u058d\n\64\3")
        buf.write("\64\5\64\u0590\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u0598\n\64\3\64\3\64\3\64\3\64\7\64\u059e\n\64\f\64\16")
        buf.write("\64\u05a1\13\64\3\64\5\64\u05a4\n\64\3\64\3\64\5\64\u05a8")
        buf.write("\n\64\3\64\5\64\u05ab\n\64\3\64\3\64\3\64\3\64\5\64\u05b1")
        buf.write("\n\64\3\64\5\64\u05b4\n\64\5\64\u05b6\n\64\3\65\3\65\3")
        buf.write("\65\3\65\3\65\7\65\u05bd\n\65\f\65\16\65\u05c0\13\65\3")
        buf.write("\66\3\66\5\66\u05c4\n\66\3\66\3\66\5\66\u05c8\n\66\3\66")
        buf.write("\3\66\5\66\u05cc\n\66\3\66\5\66\u05cf\n\66\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\7\67\u05d8\n\67\f\67\16\67\u05db")
        buf.write("\13\67\3\67\3\67\5\67\u05df\n\67\38\38\58\u05e3\n8\38")
        buf.write("\58\u05e6\n8\38\58\u05e9\n8\38\38\38\38\38\78\u05f0\n")
        buf.write("8\f8\168\u05f3\138\38\38\38\38\38\38\78\u05fb\n8\f8\16")
        buf.write("8\u05fe\138\38\38\78\u0602\n8\f8\168\u0605\138\58\u0607")
        buf.write("\n8\39\39\39\39\39\59\u060e\n9\3:\3:\3:\3:\3:\7:\u0615")
        buf.write("\n:\f:\16:\u0618\13:\3:\3:\5:\u061c\n:\3;\5;\u061f\n;")
        buf.write("\3;\3;\3<\3<\3<\3<\3<\3<\3<\5<\u062a\n<\3=\3=\3>\3>\3")
        buf.write("?\3?\5?\u0632\n?\3@\3@\3A\3A\3A\5A\u0639\nA\3A\3A\3A\7")
        buf.write("A\u063e\nA\fA\16A\u0641\13A\3B\3B\3B\3B\7B\u0647\nB\f")
        buf.write("B\16B\u064a\13B\3B\5B\u064d\nB\3C\3C\3C\3D\3D\3D\3D\3")
        buf.write("D\7D\u0657\nD\fD\16D\u065a\13D\3D\5D\u065d\nD\3E\3E\3")
        buf.write("E\3F\3F\3F\3F\3F\7F\u0667\nF\fF\16F\u066a\13F\3G\3G\3")
        buf.write("G\3G\5G\u0670\nG\3H\3H\3H\3I\3I\5I\u0677\nI\3I\3I\3I\3")
        buf.write("I\3I\6I\u067e\nI\rI\16I\u067f\3I\3I\5I\u0684\nI\3I\3I")
        buf.write("\3J\3J\3K\3K\3L\3L\3M\3M\3N\3N\3O\3O\3P\3P\3Q\3Q\3R\3")
        buf.write("R\3S\3S\3T\3T\3U\3U\3V\3V\3W\3W\3X\3X\3Y\3Y\3Z\3Z\3[\3")
        buf.write("[\3\\\3\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3")
        buf.write("d\3d\3e\3e\3f\3f\3g\3g\3h\3h\3i\3i\3j\3j\3k\3k\3l\3l\3")
        buf.write("m\3m\3n\3n\3o\3o\3p\3p\3q\3q\3r\3r\3s\3s\3t\3t\3u\3u\3")
        buf.write("u\3u\3u\3u\3u\5u\u06e5\nu\3u\2\3Pv\2\4\6\b\n\f\16\20\22")
        buf.write('\24\26\30\32\34\36 "$&(*,.\60\62\64\668:<>@BDFHJLNPR')
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2")
        buf.write("\u00e4\u00e6\u00e8\2\17\5\2<<GGTT\4\2\61\61DD\3\2\u0085")
        buf.write("\u0086\7\2\33\33JJSS||\177\177\6\2OOcceexx\4\2==\u008d")
        buf.write("\u008d\5\2\33\33JJ\177\177\3\2\n\13\4\2\n\fhh\4\2\u0097")
        buf.write("\u0097\u009a\u009a\4\2\7\7ll\4\2\b\13\r\32\3\2\33\u0096")
        buf.write("\2\u07c7\2\u00ee\3\2\2\2\4\u00f3\3\2\2\2\6\u00f9\3\2\2")
        buf.write("\2\b\u0113\3\2\2\2\n\u0135\3\2\2\2\f\u0147\3\2\2\2\16")
        buf.write("\u0150\3\2\2\2\20\u0158\3\2\2\2\22\u0162\3\2\2\2\24\u0175")
        buf.write("\3\2\2\2\26\u018b\3\2\2\2\30\u01aa\3\2\2\2\32\u01d3\3")
        buf.write("\2\2\2\34\u0218\3\2\2\2\36\u022b\3\2\2\2 \u0249\3\2\2")
        buf.write('\2"\u0252\3\2\2\2$\u0260\3\2\2\2&\u0266\3\2\2\2(\u0273')
        buf.write("\3\2\2\2*\u0280\3\2\2\2,\u028d\3\2\2\2.\u02a6\3\2\2\2")
        buf.write("\60\u02b8\3\2\2\2\62\u0302\3\2\2\2\64\u0311\3\2\2\2\66")
        buf.write("\u031e\3\2\2\28\u0324\3\2\2\2:\u0332\3\2\2\2<\u0341\3")
        buf.write("\2\2\2>\u0356\3\2\2\2@\u038d\3\2\2\2B\u0390\3\2\2\2D\u03b2")
        buf.write("\3\2\2\2F\u03d9\3\2\2\2H\u03db\3\2\2\2J\u03e6\3\2\2\2")
        buf.write("L\u03f8\3\2\2\2N\u0421\3\2\2\2P\u045d\3\2\2\2R\u04c6\3")
        buf.write("\2\2\2T\u04f6\3\2\2\2V\u0500\3\2\2\2X\u050b\3\2\2\2Z\u0533")
        buf.write("\3\2\2\2\\\u054b\3\2\2\2^\u0556\3\2\2\2`\u0562\3\2\2\2")
        buf.write("b\u0564\3\2\2\2d\u0583\3\2\2\2f\u05b5\3\2\2\2h\u05b7\3")
        buf.write("\2\2\2j\u05ce\3\2\2\2l\u05de\3\2\2\2n\u0606\3\2\2\2p\u060d")
        buf.write("\3\2\2\2r\u060f\3\2\2\2t\u061e\3\2\2\2v\u0629\3\2\2\2")
        buf.write("x\u062b\3\2\2\2z\u062d\3\2\2\2|\u0631\3\2\2\2~\u0633\3")
        buf.write("\2\2\2\u0080\u0635\3\2\2\2\u0082\u0642\3\2\2\2\u0084\u064e")
        buf.write("\3\2\2\2\u0086\u0651\3\2\2\2\u0088\u065e\3\2\2\2\u008a")
        buf.write("\u0661\3\2\2\2\u008c\u066b\3\2\2\2\u008e\u0671\3\2\2\2")
        buf.write("\u0090\u0674\3\2\2\2\u0092\u0687\3\2\2\2\u0094\u0689\3")
        buf.write("\2\2\2\u0096\u068b\3\2\2\2\u0098\u068d\3\2\2\2\u009a\u068f")
        buf.write("\3\2\2\2\u009c\u0691\3\2\2\2\u009e\u0693\3\2\2\2\u00a0")
        buf.write("\u0695\3\2\2\2\u00a2\u0697\3\2\2\2\u00a4\u0699\3\2\2\2")
        buf.write("\u00a6\u069b\3\2\2\2\u00a8\u069d\3\2\2\2\u00aa\u069f\3")
        buf.write("\2\2\2\u00ac\u06a1\3\2\2\2\u00ae\u06a3\3\2\2\2\u00b0\u06a5")
        buf.write("\3\2\2\2\u00b2\u06a7\3\2\2\2\u00b4\u06a9\3\2\2\2\u00b6")
        buf.write("\u06ab\3\2\2\2\u00b8\u06ad\3\2\2\2\u00ba\u06af\3\2\2\2")
        buf.write("\u00bc\u06b1\3\2\2\2\u00be\u06b3\3\2\2\2\u00c0\u06b5\3")
        buf.write("\2\2\2\u00c2\u06b7\3\2\2\2\u00c4\u06b9\3\2\2\2\u00c6\u06bb")
        buf.write("\3\2\2\2\u00c8\u06bd\3\2\2\2\u00ca\u06bf\3\2\2\2\u00cc")
        buf.write("\u06c1\3\2\2\2\u00ce\u06c3\3\2\2\2\u00d0\u06c5\3\2\2\2")
        buf.write("\u00d2\u06c7\3\2\2\2\u00d4\u06c9\3\2\2\2\u00d6\u06cb\3")
        buf.write("\2\2\2\u00d8\u06cd\3\2\2\2\u00da\u06cf\3\2\2\2\u00dc\u06d1")
        buf.write("\3\2\2\2\u00de\u06d3\3\2\2\2\u00e0\u06d5\3\2\2\2\u00e2")
        buf.write("\u06d7\3\2\2\2\u00e4\u06d9\3\2\2\2\u00e6\u06db\3\2\2\2")
        buf.write("\u00e8\u06e4\3\2\2\2\u00ea\u00ed\5\6\4\2\u00eb\u00ed\5")
        buf.write("\4\3\2\u00ec\u00ea\3\2\2\2\u00ec\u00eb\3\2\2\2\u00ed\u00f0")
        buf.write("\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef")
        buf.write("\u00f1\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00f2\7\2\2\3")
        buf.write("\u00f2\3\3\2\2\2\u00f3\u00f4\7\u009f\2\2\u00f4\u00f5\b")
        buf.write("\3\1\2\u00f5\5\3\2\2\2\u00f6\u00f8\7\3\2\2\u00f7\u00f6")
        buf.write("\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fc\u0105\5\b\5\2\u00fd\u00ff\7\3\2\2\u00fe\u00fd\3")
        buf.write("\2\2\2\u00ff\u0100\3\2\2\2\u0100\u00fe\3\2\2\2\u0100\u0101")
        buf.write("\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0104\5\b\5\2\u0103")
        buf.write("\u00fe\3\2\2\2\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2\2")
        buf.write("\u0105\u0106\3\2\2\2\u0106\u010b\3\2\2\2\u0107\u0105\3")
        buf.write("\2\2\2\u0108\u010a\7\3\2\2\u0109\u0108\3\2\2\2\u010a\u010d")
        buf.write("\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2\u010c")
        buf.write("\7\3\2\2\2\u010d\u010b\3\2\2\2\u010e\u0111\7I\2\2\u010f")
        buf.write("\u0110\7t\2\2\u0110\u0112\7q\2\2\u0111\u010f\3\2\2\2\u0111")
        buf.write("\u0112\3\2\2\2\u0112\u0114\3\2\2\2\u0113\u010e\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u0133\3\2\2\2\u0115\u0134\5")
        buf.write("\n\6\2\u0116\u0134\5\f\7\2\u0117\u0134\5\16\b\2\u0118")
        buf.write("\u0134\5\20\t\2\u0119\u0134\5\22\n\2\u011a\u0134\5\24")
        buf.write("\13\2\u011b\u0134\5\26\f\2\u011c\u0134\5\30\r\2\u011d")
        buf.write("\u0134\5\32\16\2\u011e\u0134\5\34\17\2\u011f\u0134\5\36")
        buf.write('\20\2\u0120\u0134\5 \21\2\u0121\u0134\5"\22\2\u0122\u0134')
        buf.write("\5$\23\2\u0123\u0134\5&\24\2\u0124\u0134\5(\25\2\u0125")
        buf.write("\u0134\5*\26\2\u0126\u0134\5,\27\2\u0127\u0134\5.\30\2")
        buf.write("\u0128\u0134\5\60\31\2\u0129\u0134\5\62\32\2\u012a\u0134")
        buf.write("\5\64\33\2\u012b\u0134\5\66\34\2\u012c\u0134\58\35\2\u012d")
        buf.write("\u0134\5:\36\2\u012e\u0134\5<\37\2\u012f\u0134\5> \2\u0130")
        buf.write('\u0134\5B"\2\u0131\u0134\5D#\2\u0132\u0134\5F$\2\u0133')
        buf.write("\u0115\3\2\2\2\u0133\u0116\3\2\2\2\u0133\u0117\3\2\2\2")
        buf.write("\u0133\u0118\3\2\2\2\u0133\u0119\3\2\2\2\u0133\u011a\3")
        buf.write("\2\2\2\u0133\u011b\3\2\2\2\u0133\u011c\3\2\2\2\u0133\u011d")
        buf.write("\3\2\2\2\u0133\u011e\3\2\2\2\u0133\u011f\3\2\2\2\u0133")
        buf.write("\u0120\3\2\2\2\u0133\u0121\3\2\2\2\u0133\u0122\3\2\2\2")
        buf.write("\u0133\u0123\3\2\2\2\u0133\u0124\3\2\2\2\u0133\u0125\3")
        buf.write("\2\2\2\u0133\u0126\3\2\2\2\u0133\u0127\3\2\2\2\u0133\u0128")
        buf.write("\3\2\2\2\u0133\u0129\3\2\2\2\u0133\u012a\3\2\2\2\u0133")
        buf.write("\u012b\3\2\2\2\u0133\u012c\3\2\2\2\u0133\u012d\3\2\2\2")
        buf.write("\u0133\u012e\3\2\2\2\u0133\u012f\3\2\2\2\u0133\u0130\3")
        buf.write("\2\2\2\u0133\u0131\3\2\2\2\u0133\u0132\3\2\2\2\u0134\t")
        buf.write("\3\2\2\2\u0135\u0136\7 \2\2\u0136\u013a\7\u0084\2\2\u0137")
        buf.write("\u0138\5\u00caf\2\u0138\u0139\7\4\2\2\u0139\u013b\3\2")
        buf.write("\2\2\u013a\u0137\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c")
        buf.write("\3\2\2\2\u013c\u0145\5\u00ccg\2\u013d\u013e\7{\2\2\u013e")
        buf.write("\u013f\7\u0088\2\2\u013f\u0146\5\u00d0i\2\u0140\u0142")
        buf.write("\7\35\2\2\u0141\u0143\7\60\2\2\u0142\u0141\3\2\2\2\u0142")
        buf.write("\u0143\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0146\5H%\2\u0145")
        buf.write("\u013d\3\2\2\2\u0145\u0140\3\2\2\2\u0146\13\3\2\2\2\u0147")
        buf.write("\u014e\7!\2\2\u0148\u014f\5\u00caf\2\u0149\u014f\5\u00ce")
        buf.write("h\2\u014a\u014b\5\u00caf\2\u014b\u014c\7\4\2\2\u014c\u014d")
        buf.write("\5\u00ceh\2\u014d\u014f\3\2\2\2\u014e\u0148\3\2\2\2\u014e")
        buf.write("\u0149\3\2\2\2\u014e\u014a\3\2\2\2\u014e\u014f\3\2\2\2")
        buf.write("\u014f\r\3\2\2\2\u0150\u0152\7%\2\2\u0151\u0153\79\2\2")
        buf.write("\u0152\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0154\3")
        buf.write("\2\2\2\u0154\u0155\5P)\2\u0155\u0156\7#\2\2\u0156\u0157")
        buf.write("\5\u00caf\2\u0157\17\3\2\2\2\u0158\u015a\7(\2\2\u0159")
        buf.write("\u015b\t\2\2\2\u015a\u0159\3\2\2\2\u015a\u015b\3\2\2\2")
        buf.write("\u015b\u0160\3\2\2\2\u015c\u015e\7\u0089\2\2\u015d\u015f")
        buf.write("\5\u00e6t\2\u015e\u015d\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0161\3\2\2\2\u0160\u015c\3\2\2\2\u0160\u0161\3\2\2\2")
        buf.write("\u0161\21\3\2\2\2\u0162\u0167\t\3\2\2\u0163\u0165\7\u0089")
        buf.write("\2\2\u0164\u0166\5\u00e6t\2\u0165\u0164\3\2\2\2\u0165")
        buf.write("\u0166\3\2\2\2\u0166\u0168\3\2\2\2\u0167\u0163\3\2\2\2")
        buf.write("\u0167\u0168\3\2\2\2\u0168\23\3\2\2\2\u0169\u016b\7\u0095")
        buf.write("\2\2\u016a\u016c\7v\2\2\u016b\u016a\3\2\2\2\u016b\u016c")
        buf.write("\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u0172\5b\62\2\u016e")
        buf.write("\u016f\7\7\2\2\u016f\u0171\5b\62\2\u0170\u016e\3\2\2\2")
        buf.write("\u0171\u0174\3\2\2\2\u0172\u0170\3\2\2\2\u0172\u0173\3")
        buf.write("\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u0169")
        buf.write("\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0177\3\2\2\2\u0177")
        buf.write("\u0181\5n8\2\u0178\u017a\7\u008b\2\2\u0179\u017b\7\37")
        buf.write("\2\2\u017a\u0179\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017f")
        buf.write("\3\2\2\2\u017c\u017f\7\\\2\2\u017d\u017f\7F\2\2\u017e")
        buf.write("\u0178\3\2\2\2\u017e\u017c\3\2\2\2\u017e\u017d\3\2\2\2")
        buf.write("\u017f\u0180\3\2\2\2\u0180\u0182\5n8\2\u0181\u017e\3\2")
        buf.write("\2\2\u0182\u0183\3\2\2\2\u0183\u0181\3\2\2\2\u0183\u0184")
        buf.write("\3\2\2\2\u0184\u0186\3\2\2\2\u0185\u0187\5\u008aF\2\u0186")
        buf.write("\u0185\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0189\3\2\2\2")
        buf.write("\u0188\u018a\5\u008cG\2\u0189\u0188\3\2\2\2\u0189\u018a")
        buf.write("\3\2\2\2\u018a\25\3\2\2\2\u018b\u018d\7\64\2\2\u018c\u018e")
        buf.write("\7\u008c\2\2\u018d\u018c\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\u018f\3\2\2\2\u018f\u0193\7V\2\2\u0190\u0191\7R\2\2\u0191")
        buf.write("\u0192\7h\2\2\u0192\u0194\7H\2\2\u0193\u0190\3\2\2\2\u0193")
        buf.write("\u0194\3\2\2\2\u0194\u0198\3\2\2\2\u0195\u0196\5\u00ca")
        buf.write("f\2\u0196\u0197\7\4\2\2\u0197\u0199\3\2\2\2\u0198\u0195")
        buf.write("\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\3\2\2\2\u019a")
        buf.write("\u019b\5\u00d8m\2\u019b\u019c\7m\2\2\u019c\u019d\5\u00cc")
        buf.write("g\2\u019d\u019e\7\5\2\2\u019e\u01a3\5V,\2\u019f\u01a0")
        buf.write("\7\7\2\2\u01a0\u01a2\5V,\2\u01a1\u019f\3\2\2\2\u01a2\u01a5")
        buf.write("\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4")
        buf.write("\u01a6\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01a8\7\6\2\2")
        buf.write("\u01a7\u01a9\5\u0088E\2\u01a8\u01a7\3\2\2\2\u01a8\u01a9")
        buf.write("\3\2\2\2\u01a9\27\3\2\2\2\u01aa\u01ac\7\64\2\2\u01ab\u01ad")
        buf.write("\t\4\2\2\u01ac\u01ab\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad")
        buf.write("\u01ae\3\2\2\2\u01ae\u01b2\7\u0084\2\2\u01af\u01b0\7R")
        buf.write("\2\2\u01b0\u01b1\7h\2\2\u01b1\u01b3\7H\2\2\u01b2\u01af")
        buf.write("\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b7\3\2\2\2\u01b4")
        buf.write("\u01b5\5\u00caf\2\u01b5\u01b6\7\4\2\2\u01b6\u01b8\3\2")
        buf.write("\2\2\u01b7\u01b4\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\u01d1\5\u00ccg\2\u01ba\u01bb\7\5\2\2\u01bb")
        buf.write("\u01c0\5H%\2\u01bc\u01bd\7\7\2\2\u01bd\u01bf\5H%\2\u01be")
        buf.write("\u01bc\3\2\2\2\u01bf\u01c2\3\2\2\2\u01c0\u01be\3\2\2\2")
        buf.write("\u01c0\u01c1\3\2\2\2\u01c1\u01c7\3\2\2\2\u01c2\u01c0\3")
        buf.write("\2\2\2\u01c3\u01c4\7\7\2\2\u01c4\u01c6\5X-\2\u01c5\u01c3")
        buf.write("\3\2\2\2\u01c6\u01c9\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7")
        buf.write("\u01c8\3\2\2\2\u01c8\u01ca\3\2\2\2\u01c9\u01c7\3\2\2\2")
        buf.write("\u01ca\u01cd\7\6\2\2\u01cb\u01cc\7\u0096\2\2\u01cc\u01ce")
        buf.write("\7\u0097\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce")
        buf.write("\u01d2\3\2\2\2\u01cf\u01d0\7#\2\2\u01d0\u01d2\5> \2\u01d1")
        buf.write("\u01ba\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2\31\3\2\2\2\u01d3")
        buf.write("\u01d5\7\64\2\2\u01d4\u01d6\t\4\2\2\u01d5\u01d4\3\2\2")
        buf.write("\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01db")
        buf.write("\7\u008a\2\2\u01d8\u01d9\7R\2\2\u01d9\u01da\7h\2\2\u01da")
        buf.write("\u01dc\7H\2\2\u01db\u01d8\3\2\2\2\u01db\u01dc\3\2\2\2")
        buf.write("\u01dc\u01e0\3\2\2\2\u01dd\u01de\5\u00caf\2\u01de\u01df")
        buf.write("\7\4\2\2\u01df\u01e1\3\2\2\2\u01e0\u01dd\3\2\2\2\u01e0")
        buf.write("\u01e1\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e7\5\u00da")
        buf.write("n\2\u01e3\u01e8\7'\2\2\u01e4\u01e8\7\36\2\2\u01e5\u01e6")
        buf.write("\7[\2\2\u01e6\u01e8\7k\2\2\u01e7\u01e3\3\2\2\2\u01e7\u01e4")
        buf.write("\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8")
        buf.write("\u01f7\3\2\2\2\u01e9\u01f8\7=\2\2\u01ea\u01f8\7Z\2\2\u01eb")
        buf.write("\u01f5\7\u008d\2\2\u01ec\u01ed\7k\2\2\u01ed\u01f2\5\u00d2")
        buf.write("j\2\u01ee\u01ef\7\7\2\2\u01ef\u01f1\5\u00d2j\2\u01f0\u01ee")
        buf.write("\3\2\2\2\u01f1\u01f4\3\2\2\2\u01f2\u01f0\3\2\2\2\u01f2")
        buf.write("\u01f3\3\2\2\2\u01f3\u01f6\3\2\2\2\u01f4\u01f2\3\2\2\2")
        buf.write("\u01f5\u01ec\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8\3")
        buf.write("\2\2\2\u01f7\u01e9\3\2\2\2\u01f7\u01ea\3\2\2\2\u01f7\u01eb")
        buf.write("\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fd\7m\2\2\u01fa")
        buf.write("\u01fb\5\u00caf\2\u01fb\u01fc\7\4\2\2\u01fc\u01fe\3\2")
        buf.write("\2\2\u01fd\u01fa\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u01ff")
        buf.write("\3\2\2\2\u01ff\u0203\5\u00ccg\2\u0200\u0201\7K\2\2\u0201")
        buf.write("\u0202\7B\2\2\u0202\u0204\7\u0080\2\2\u0203\u0200\3\2")
        buf.write("\2\2\u0203\u0204\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0206")
        buf.write("\7\u0093\2\2\u0206\u0208\5P)\2\u0207\u0205\3\2\2\2\u0207")
        buf.write("\u0208\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u0212\7(\2\2")
        buf.write('\u020a\u020f\5B"\2\u020b\u020f\5\60\31\2\u020c\u020f')
        buf.write("\5 \21\2\u020d\u020f\5> \2\u020e\u020a\3\2\2\2\u020e\u020b")
        buf.write("\3\2\2\2\u020e\u020c\3\2\2\2\u020e\u020d\3\2\2\2\u020f")
        buf.write("\u0210\3\2\2\2\u0210\u0211\7\3\2\2\u0211\u0213\3\2\2\2")
        buf.write("\u0212\u020e\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0212\3")
        buf.write("\2\2\2\u0214\u0215\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0217")
        buf.write("\7D\2\2\u0217\33\3\2\2\2\u0218\u021a\7\64\2\2\u0219\u021b")
        buf.write("\t\4\2\2\u021a\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b")
        buf.write("\u021c\3\2\2\2\u021c\u0220\7\u0091\2\2\u021d\u021e\7R")
        buf.write("\2\2\u021e\u021f\7h\2\2\u021f\u0221\7H\2\2\u0220\u021d")
        buf.write("\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0225\3\2\2\2\u0222")
        buf.write("\u0223\5\u00caf\2\u0223\u0224\7\4\2\2\u0224\u0226\3\2")
        buf.write("\2\2\u0225\u0222\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227")
        buf.write("\3\2\2\2\u0227\u0228\5\u00dco\2\u0228\u0229\7#\2\2\u0229")
        buf.write("\u022a\5> \2\u022a\35\3\2\2\2\u022b\u022c\7\64\2\2\u022c")
        buf.write("\u022d\7\u0092\2\2\u022d\u0231\7\u0084\2\2\u022e\u022f")
        buf.write("\7R\2\2\u022f\u0230\7h\2\2\u0230\u0232\7H\2\2\u0231\u022e")
        buf.write("\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0236\3\2\2\2\u0233")
        buf.write("\u0234\5\u00caf\2\u0234\u0235\7\4\2\2\u0235\u0237\3\2")
        buf.write("\2\2\u0236\u0233\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0238")
        buf.write("\3\2\2\2\u0238\u0239\5\u00ccg\2\u0239\u023a\7\u008e\2")
        buf.write("\2\u023a\u0246\5\u00dep\2\u023b\u023c\7\5\2\2\u023c\u0241")
        buf.write("\5|?\2\u023d\u023e\7\7\2\2\u023e\u0240\5|?\2\u023f\u023d")
        buf.write("\3\2\2\2\u0240\u0243\3\2\2\2\u0241\u023f\3\2\2\2\u0241")
        buf.write("\u0242\3\2\2\2\u0242\u0244\3\2\2\2\u0243\u0241\3\2\2\2")
        buf.write("\u0244\u0245\7\6\2\2\u0245\u0247\3\2\2\2\u0246\u023b\3")
        buf.write("\2\2\2\u0246\u0247\3\2\2\2\u0247\37\3\2\2\2\u0248\u024a")
        buf.write("\5Z.\2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024b")
        buf.write("\3\2\2\2\u024b\u024c\7=\2\2\u024c\u024d\7M\2\2\u024d\u024f")
        buf.write("\5\\/\2\u024e\u0250\5\u0088E\2\u024f\u024e\3\2\2\2\u024f")
        buf.write("\u0250\3\2\2\2\u0250!\3\2\2\2\u0251\u0253\5Z.\2\u0252")
        buf.write("\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0254\3\2\2\2")
        buf.write("\u0254\u0255\7=\2\2\u0255\u0256\7M\2\2\u0256\u0258\5\\")
        buf.write("/\2\u0257\u0259\5\u0088E\2\u0258\u0257\3\2\2\2\u0258\u0259")
        buf.write("\3\2\2\2\u0259\u025e\3\2\2\2\u025a\u025c\5\u008aF\2\u025b")
        buf.write("\u025a\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025d\3\2\2\2")
        buf.write("\u025d\u025f\5\u008cG\2\u025e\u025b\3\2\2\2\u025e\u025f")
        buf.write("\3\2\2\2\u025f#\3\2\2\2\u0260\u0262\7?\2\2\u0261\u0263")
        buf.write("\79\2\2\u0262\u0261\3\2\2\2\u0262\u0263\3\2\2\2\u0263")
        buf.write("\u0264\3\2\2\2\u0264\u0265\5\u00caf\2\u0265%\3\2\2\2\u0266")
        buf.write("\u0267\7A\2\2\u0267\u026a\7V\2\2\u0268\u0269\7R\2\2\u0269")
        buf.write("\u026b\7H\2\2\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2")
        buf.write("\u026b\u026f\3\2\2\2\u026c\u026d\5\u00caf\2\u026d\u026e")
        buf.write("\7\4\2\2\u026e\u0270\3\2\2\2\u026f\u026c\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\5\u00d8")
        buf.write("m\2\u0272'\3\2\2\2\u0273\u0274\7A\2\2\u0274\u0277\7\u0084")
        buf.write("\2\2\u0275\u0276\7R\2\2\u0276\u0278\7H\2\2\u0277\u0275")
        buf.write("\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027c\3\2\2\2\u0279")
        buf.write("\u027a\5\u00caf\2\u027a\u027b\7\4\2\2\u027b\u027d\3\2")
        buf.write("\2\2\u027c\u0279\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027e")
        buf.write("\3\2\2\2\u027e\u027f\5\u00ccg\2\u027f)\3\2\2\2\u0280\u0281")
        buf.write("\7A\2\2\u0281\u0284\7\u008a\2\2\u0282\u0283\7R\2\2\u0283")
        buf.write("\u0285\7H\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u0289\3\2\2\2\u0286\u0287\5\u00caf\2\u0287\u0288")
        buf.write("\7\4\2\2\u0288\u028a\3\2\2\2\u0289\u0286\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\5\u00da")
        buf.write("n\2\u028c+\3\2\2\2\u028d\u028e\7A\2\2\u028e\u0291\7\u0091")
        buf.write("\2\2\u028f\u0290\7R\2\2\u0290\u0292\7H\2\2\u0291\u028f")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0296\3\2\2\2\u0293")
        buf.write("\u0294\5\u00caf\2\u0294\u0295\7\4\2\2\u0295\u0297\3\2")
        buf.write("\2\2\u0296\u0293\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0298")
        buf.write("\3\2\2\2\u0298\u0299\5\u00dco\2\u0299-\3\2\2\2\u029a\u029c")
        buf.write("\7\u0095\2\2\u029b\u029d\7v\2\2\u029c\u029b\3\2\2\2\u029c")
        buf.write("\u029d\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02a3\5b\62\2")
        buf.write("\u029f\u02a0\7\7\2\2\u02a0\u02a2\5b\62\2\u02a1\u029f\3")
        buf.write("\2\2\2\u02a2\u02a5\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4")
        buf.write("\3\2\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a6")
        buf.write("\u029a\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8\3\2\2\2")
        buf.write("\u02a8\u02ae\5n8\2\u02a9\u02aa\5p9\2\u02aa\u02ab\5n8\2")
        buf.write("\u02ab\u02ad\3\2\2\2\u02ac\u02a9\3\2\2\2\u02ad\u02b0\3")
        buf.write("\2\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b2")
        buf.write("\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b1\u02b3\5\u008aF\2\u02b2")
        buf.write("\u02b1\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b5\3\2\2\2")
        buf.write("\u02b4\u02b6\5\u008cG\2\u02b5\u02b4\3\2\2\2\u02b5\u02b6")
        buf.write("\3\2\2\2\u02b6/\3\2\2\2\u02b7\u02b9\5Z.\2\u02b8\u02b7")
        buf.write("\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02cb\3\2\2\2\u02ba")
        buf.write("\u02cc\7Z\2\2\u02bb\u02cc\7|\2\2\u02bc\u02bd\7Z\2\2\u02bd")
        buf.write("\u02be\7n\2\2\u02be\u02cc\7|\2\2\u02bf\u02c0\7Z\2\2\u02c0")
        buf.write("\u02c1\7n\2\2\u02c1\u02cc\7\177\2\2\u02c2\u02c3\7Z\2\2")
        buf.write("\u02c3\u02c4\7n\2\2\u02c4\u02cc\7\33\2\2\u02c5\u02c6\7")
        buf.write("Z\2\2\u02c6\u02c7\7n\2\2\u02c7\u02cc\7J\2\2\u02c8\u02c9")
        buf.write("\7Z\2\2\u02c9\u02ca\7n\2\2\u02ca\u02cc\7S\2\2\u02cb\u02ba")
        buf.write("\3\2\2\2\u02cb\u02bb\3\2\2\2\u02cb\u02bc\3\2\2\2\u02cb")
        buf.write("\u02bf\3\2\2\2\u02cb\u02c2\3\2\2\2\u02cb\u02c5\3\2\2\2")
        buf.write("\u02cb\u02c8\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02d1\7")
        buf.write("]\2\2\u02ce\u02cf\5\u00caf\2\u02cf\u02d0\7\4\2\2\u02d0")
        buf.write("\u02d2\3\2\2\2\u02d1\u02ce\3\2\2\2\u02d1\u02d2\3\2\2\2")
        buf.write("\u02d2\u02d3\3\2\2\2\u02d3\u02df\5\u00ccg\2\u02d4\u02d5")
        buf.write("\7\5\2\2\u02d5\u02da\5\u00d2j\2\u02d6\u02d7\7\7\2\2\u02d7")
        buf.write("\u02d9\5\u00d2j\2\u02d8\u02d6\3\2\2\2\u02d9\u02dc\3\2")
        buf.write("\2\2\u02da\u02d8\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02dd")
        buf.write("\3\2\2\2\u02dc\u02da\3\2\2\2\u02dd\u02de\7\6\2\2\u02de")
        buf.write("\u02e0\3\2\2\2\u02df\u02d4\3\2\2\2\u02df\u02e0\3\2\2\2")
        buf.write("\u02e0\u0300\3\2\2\2\u02e1\u02e2\7\u0090\2\2\u02e2\u02e3")
        buf.write("\7\5\2\2\u02e3\u02e8\5P)\2\u02e4\u02e5\7\7\2\2\u02e5\u02e7")
        buf.write("\5P)\2\u02e6\u02e4\3\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6")
        buf.write("\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02eb\3\2\2\2\u02ea")
        buf.write("\u02e8\3\2\2\2\u02eb\u02fa\7\6\2\2\u02ec\u02ed\7\7\2\2")
        buf.write("\u02ed\u02ee\7\5\2\2\u02ee\u02f3\5P)\2\u02ef\u02f0\7\7")
        buf.write("\2\2\u02f0\u02f2\5P)\2\u02f1\u02ef\3\2\2\2\u02f2\u02f5")
        buf.write("\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4")
        buf.write("\u02f6\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f6\u02f7\7\6\2\2")
        buf.write("\u02f7\u02f9\3\2\2\2\u02f8\u02ec\3\2\2\2\u02f9\u02fc\3")
        buf.write("\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u0301")
        buf.write("\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd\u0301\5> \2\u02fe\u02ff")
        buf.write("\7:\2\2\u02ff\u0301\7\u0090\2\2\u0300\u02e1\3\2\2\2\u0300")
        buf.write("\u02fd\3\2\2\2\u0300\u02fe\3\2\2\2\u0301\61\3\2\2\2\u0302")
        buf.write("\u0306\7r\2\2\u0303\u0304\5\u00caf\2\u0304\u0305\7\4\2")
        buf.write("\2\u0305\u0307\3\2\2\2\u0306\u0303\3\2\2\2\u0306\u0307")
        buf.write("\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u030f\5\u00e0q\2\u0309")
        buf.write("\u030a\7\b\2\2\u030a\u0310\5`\61\2\u030b\u030c\7\5\2\2")
        buf.write("\u030c\u030d\5`\61\2\u030d\u030e\7\6\2\2\u030e\u0310\3")
        buf.write("\2\2\2\u030f\u0309\3\2\2\2\u030f\u030b\3\2\2\2\u030f\u0310")
        buf.write("\3\2\2\2\u0310\63\3\2\2\2\u0311\u031c\7y\2\2\u0312\u031d")
        buf.write("\5\u00d4k\2\u0313\u0314\5\u00caf\2\u0314\u0315\7\4\2\2")
        buf.write("\u0315\u0317\3\2\2\2\u0316\u0313\3\2\2\2\u0316\u0317\3")
        buf.write("\2\2\2\u0317\u031a\3\2\2\2\u0318\u031b\5\u00ccg\2\u0319")
        buf.write("\u031b\5\u00d8m\2\u031a\u0318\3\2\2\2\u031a\u0319\3\2")
        buf.write("\2\2\u031b\u031d\3\2\2\2\u031c\u0312\3\2\2\2\u031c\u0316")
        buf.write("\3\2\2\2\u031c\u031d\3\2\2\2\u031d\65\3\2\2\2\u031e\u0320")
        buf.write("\7z\2\2\u031f\u0321\7\u0081\2\2\u0320\u031f\3\2\2\2\u0320")
        buf.write("\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\5\u00e2")
        buf.write("r\2\u0323\67\3\2\2\2\u0324\u0329\7\177\2\2\u0325\u0327")
        buf.write("\7\u0089\2\2\u0326\u0328\5\u00e6t\2\u0327\u0326\3\2\2")
        buf.write("\2\u0327\u0328\3\2\2\2\u0328\u032a\3\2\2\2\u0329\u0325")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u0330\3\2\2\2\u032b")
        buf.write("\u032d\7\u0088\2\2\u032c\u032e\7\u0081\2\2\u032d\u032c")
        buf.write("\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("\u0331\5\u00e2r\2\u0330\u032b\3\2\2\2\u0330\u0331\3\2")
        buf.write("\2\2\u03319\3\2\2\2\u0332\u0333\7\u0081\2\2\u0333\u0334")
        buf.write("\5\u00e2r\2\u0334;\3\2\2\2\u0335\u0337\7\u0095\2\2\u0336")
        buf.write("\u0338\7v\2\2\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2")
        buf.write("\u0338\u0339\3\2\2\2\u0339\u033e\5b\62\2\u033a\u033b\7")
        buf.write("\7\2\2\u033b\u033d\5b\62\2\u033c\u033a\3\2\2\2\u033d\u0340")
        buf.write("\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f")
        buf.write("\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0341\u0335\3\2\2\2")
        buf.write("\u0341\u0342\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345\5")
        buf.write("n8\2\u0344\u0346\5\u008aF\2\u0345\u0344\3\2\2\2\u0345")
        buf.write("\u0346\3\2\2\2\u0346\u0348\3\2\2\2\u0347\u0349\5\u008c")
        buf.write("G\2\u0348\u0347\3\2\2\2\u0348\u0349\3\2\2\2\u0349=\3\2")
        buf.write("\2\2\u034a\u034c\7\u0095\2\2\u034b\u034d\7v\2\2\u034c")
        buf.write("\u034b\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034e\3\2\2\2")
        buf.write("\u034e\u0353\5b\62\2\u034f\u0350\7\7\2\2\u0350\u0352\5")
        buf.write("b\62\2\u0351\u034f\3\2\2\2\u0352\u0355\3\2\2\2\u0353\u0351")
        buf.write("\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0357\3\2\2\2\u0355")
        buf.write("\u0353\3\2\2\2\u0356\u034a\3\2\2\2\u0356\u0357\3\2\2\2")
        buf.write("\u0357\u0358\3\2\2\2\u0358\u035e\5@!\2\u0359\u035a\5p")
        buf.write("9\2\u035a\u035b\5@!\2\u035b\u035d\3\2\2\2\u035c\u0359")
        buf.write("\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e")
        buf.write("\u035f\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2")
        buf.write("\u0361\u0363\5\u008aF\2\u0362\u0361\3\2\2\2\u0362\u0363")
        buf.write("\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0366\5\u008cG\2\u0365")
        buf.write("\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366?\3\2\2\2\u0367")
        buf.write("\u0369\5\u0080A\2\u0368\u036a\5\u0082B\2\u0369\u0368\3")
        buf.write("\2\2\2\u0369\u036a\3\2\2\2\u036a\u036c\3\2\2\2\u036b\u036d")
        buf.write("\5\u0088E\2\u036c\u036b\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u036f\3\2\2\2\u036e\u0370\5\u0086D\2\u036f\u036e\3\2")
        buf.write("\2\2\u036f\u0370\3\2\2\2\u0370\u038e\3\2\2\2\u0371\u0372")
        buf.write("\7\u0090\2\2\u0372\u0373\7\5\2\2\u0373\u0378\5P)\2\u0374")
        buf.write("\u0375\7\7\2\2\u0375\u0377\5P)\2\u0376\u0374\3\2\2\2\u0377")
        buf.write("\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037b\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u038a\7")
        buf.write("\6\2\2\u037c\u037d\7\7\2\2\u037d\u037e\7\5\2\2\u037e\u0383")
        buf.write("\5P)\2\u037f\u0380\7\7\2\2\u0380\u0382\5P)\2\u0381\u037f")
        buf.write("\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2\u0383")
        buf.write("\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0383\3\2\2\2")
        buf.write("\u0386\u0387\7\6\2\2\u0387\u0389\3\2\2\2\u0388\u037c\3")
        buf.write("\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a\u038b")
        buf.write("\3\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a\3\2\2\2\u038d")
        buf.write("\u0367\3\2\2\2\u038d\u0371\3\2\2\2\u038eA\3\2\2\2\u038f")
        buf.write("\u0391\5Z.\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391")
        buf.write("\u0392\3\2\2\2\u0392\u039d\7\u008d\2\2\u0393\u0394\7n")
        buf.write("\2\2\u0394\u039e\7\177\2\2\u0395\u0396\7n\2\2\u0396\u039e")
        buf.write("\7\33\2\2\u0397\u0398\7n\2\2\u0398\u039e\7|\2\2\u0399")
        buf.write("\u039a\7n\2\2\u039a\u039e\7J\2\2\u039b\u039c\7n\2\2\u039c")
        buf.write("\u039e\7S\2\2\u039d\u0393\3\2\2\2\u039d\u0395\3\2\2\2")
        buf.write("\u039d\u0397\3\2\2\2\u039d\u0399\3\2\2\2\u039d\u039b\3")
        buf.write("\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0")
        buf.write("\5\\/\2\u03a0\u03a1\7\u0083\2\2\u03a1\u03a2\5\u00d2j\2")
        buf.write("\u03a2\u03a3\7\b\2\2\u03a3\u03ab\5P)\2\u03a4\u03a5\7\7")
        buf.write("\2\2\u03a5\u03a6\5\u00d2j\2\u03a6\u03a7\7\b\2\2\u03a7")
        buf.write("\u03a8\5P)\2\u03a8\u03aa\3\2\2\2\u03a9\u03a4\3\2\2\2\u03aa")
        buf.write("\u03ad\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac\3\2\2\2")
        buf.write("\u03ac\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae\u03b0\5")
        buf.write("\u0088E\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("C\3\2\2\2\u03b1\u03b3\5Z.\2\u03b2\u03b1\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03bf\7\u008d")
        buf.write("\2\2\u03b5\u03b6\7n\2\2\u03b6\u03c0\7\177\2\2\u03b7\u03b8")
        buf.write("\7n\2\2\u03b8\u03c0\7\33\2\2\u03b9\u03ba\7n\2\2\u03ba")
        buf.write("\u03c0\7|\2\2\u03bb\u03bc\7n\2\2\u03bc\u03c0\7J\2\2\u03bd")
        buf.write("\u03be\7n\2\2\u03be\u03c0\7S\2\2\u03bf\u03b5\3\2\2\2\u03bf")
        buf.write("\u03b7\3\2\2\2\u03bf\u03b9\3\2\2\2\u03bf\u03bb\3\2\2\2")
        buf.write("\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3")
        buf.write("\2\2\2\u03c1\u03c2\5\\/\2\u03c2\u03c3\7\u0083\2\2\u03c3")
        buf.write("\u03c4\5\u00d2j\2\u03c4\u03c5\7\b\2\2\u03c5\u03cd\5P)")
        buf.write("\2\u03c6\u03c7\7\7\2\2\u03c7\u03c8\5\u00d2j\2\u03c8\u03c9")
        buf.write("\7\b\2\2\u03c9\u03ca\5P)\2\u03ca\u03cc\3\2\2\2\u03cb\u03c6")
        buf.write("\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd")
        buf.write("\u03ce\3\2\2\2\u03ce\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2")
        buf.write("\u03d0\u03d2\5\u0088E\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u03d7\3\2\2\2\u03d3\u03d5\5\u008aF\2\u03d4")
        buf.write("\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2")
        buf.write("\u03d6\u03d8\5\u008cG\2\u03d7\u03d4\3\2\2\2\u03d7\u03d8")
        buf.write("\3\2\2\2\u03d8E\3\2\2\2\u03d9\u03da\7\u008f\2\2\u03da")
        buf.write("G\3\2\2\2\u03db\u03dd\5\u00d2j\2\u03dc\u03de\5J&\2\u03dd")
        buf.write("\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e2\3\2\2\2")
        buf.write("\u03df\u03e1\5L'\2\u03e0\u03df\3\2\2\2\u03e1\u03e4\3")
        buf.write("\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3I")
        buf.write("\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5\u03e7\5\u00c6d\2\u03e6")
        buf.write("\u03e5\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e6\3\2\2\2")
        buf.write("\u03e8\u03e9\3\2\2\2\u03e9\u03f4\3\2\2\2\u03ea\u03eb\7")
        buf.write("\5\2\2\u03eb\u03ec\5t;\2\u03ec\u03ed\7\6\2\2\u03ed\u03f5")
        buf.write("\3\2\2\2\u03ee\u03ef\7\5\2\2\u03ef\u03f0\5t;\2\u03f0\u03f1")
        buf.write("\7\7\2\2\u03f1\u03f2\5t;\2\u03f2\u03f3\7\6\2\2\u03f3\u03f5")
        buf.write("\3\2\2\2\u03f4\u03ea\3\2\2\2\u03f4\u03ee\3\2\2\2\u03f4")
        buf.write("\u03f5\3\2\2\2\u03f5K\3\2\2\2\u03f6\u03f7\7\63\2\2\u03f7")
        buf.write("\u03f9\5\u00c6d\2\u03f8\u03f6\3\2\2\2\u03f8\u03f9\3\2")
        buf.write("\2\2\u03f9\u041c\3\2\2\2\u03fa\u03fb\7s\2\2\u03fb\u03fe")
        buf.write("\7a\2\2\u03fc\u03ff\5\u009cO\2\u03fd\u03ff\7>\2\2\u03fe")
        buf.write("\u03fc\3\2\2\2\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2")
        buf.write("\u03ff\u0400\3\2\2\2\u0400\u0402\5N(\2\u0401\u0403\7&")
        buf.write("\2\2\u0402\u0401\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u041d")
        buf.write("\3\2\2\2\u0404\u0406\7h\2\2\u0405\u0404\3\2\2\2\u0405")
        buf.write("\u0406\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408\7j\2\2")
        buf.write("\u0408\u041d\5N(\2\u0409\u040a\7\u008c\2\2\u040a\u041d")
        buf.write("\5N(\2\u040b\u040c\7.\2\2\u040c\u040d\7\5\2\2\u040d\u040e")
        buf.write("\5P)\2\u040e\u040f\7\6\2\2\u040f\u041d\3\2\2\2\u0410\u0417")
        buf.write("\7:\2\2\u0411\u0418\5t;\2\u0412\u0418\5v<\2\u0413\u0414")
        buf.write("\7\5\2\2\u0414\u0415\5P)\2\u0415\u0416\7\6\2\2\u0416\u0418")
        buf.write("\3\2\2\2\u0417\u0411\3\2\2\2\u0417\u0412\3\2\2\2\u0417")
        buf.write("\u0413\3\2\2\2\u0418\u041d\3\2\2\2\u0419\u041a\7/\2\2")
        buf.write("\u041a\u041d\5\u00d4k\2\u041b\u041d\5R*\2\u041c\u03fa")
        buf.write("\3\2\2\2\u041c\u0405\3\2\2\2\u041c\u0409\3\2\2\2\u041c")
        buf.write("\u040b\3\2\2\2\u041c\u0410\3\2\2\2\u041c\u0419\3\2\2\2")
        buf.write("\u041c\u041b\3\2\2\2\u041dM\3\2\2\2\u041e\u041f\7m\2\2")
        buf.write("\u041f\u0420\7\62\2\2\u0420\u0422\t\5\2\2\u0421\u041e")
        buf.write("\3\2\2\2\u0421\u0422\3\2\2\2\u0422O\3\2\2\2\u0423\u0424")
        buf.write("\b)\1\2\u0424\u045e\5v<\2\u0425\u045e\7\u0099\2\2\u0426")
        buf.write("\u0427\5\u00caf\2\u0427\u0428\7\4\2\2\u0428\u042a\3\2")
        buf.write("\2\2\u0429\u0426\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042b")
        buf.write("\3\2\2\2\u042b\u042c\5\u00ccg\2\u042c\u042d\7\4\2\2\u042d")
        buf.write("\u042f\3\2\2\2\u042e\u0429\3\2\2\2\u042e\u042f\3\2\2\2")
        buf.write("\u042f\u0430\3\2\2\2\u0430\u045e\5\u00d2j\2\u0431\u0432")
        buf.write("\5x=\2\u0432\u0433\5P)\25\u0433\u045e\3\2\2\2\u0434\u0435")
        buf.write("\5\u00c8e\2\u0435\u0442\7\5\2\2\u0436\u0438\5\u0094K\2")
        buf.write("\u0437\u0436\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u0439\3")
        buf.write("\2\2\2\u0439\u043e\5P)\2\u043a\u043b\7\7\2\2\u043b\u043d")
        buf.write("\5P)\2\u043c\u043a\3\2\2\2\u043d\u0440\3\2\2\2\u043e\u043c")
        buf.write("\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0443\3\2\2\2\u0440")
        buf.write("\u043e\3\2\2\2\u0441\u0443\7\t\2\2\u0442\u0437\3\2\2\2")
        buf.write("\u0442\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444\3")
        buf.write("\2\2\2\u0444\u0445\7\6\2\2\u0445\u045e\3\2\2\2\u0446\u0447")
        buf.write("\7\5\2\2\u0447\u0448\5P)\2\u0448\u0449\7\6\2\2\u0449\u045e")
        buf.write("\3\2\2\2\u044a\u044b\7-\2\2\u044b\u044c\7\5\2\2\u044c")
        buf.write("\u044d\5P)\2\u044d\u044e\7#\2\2\u044e\u044f\5J&\2\u044f")
        buf.write("\u0450\7\6\2\2\u0450\u045e\3\2\2\2\u0451\u0453\5\u00c0")
        buf.write("a\2\u0452\u0451\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454")
        buf.write("\3\2\2\2\u0454\u0456\5\u00c2b\2\u0455\u0452\3\2\2\2\u0455")
        buf.write("\u0456\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0458\7\5\2\2")
        buf.write("\u0458\u0459\5> \2\u0459\u045a\7\6\2\2\u045a\u045e\3\2")
        buf.write("\2\2\u045b\u045e\5\u0090I\2\u045c\u045e\5T+\2\u045d\u0423")
        buf.write("\3\2\2\2\u045d\u0425\3\2\2\2\u045d\u042e\3\2\2\2\u045d")
        buf.write("\u0431\3\2\2\2\u045d\u0434\3\2\2\2\u045d\u0446\3\2\2\2")
        buf.write("\u045d\u044a\3\2\2\2\u045d\u0455\3\2\2\2\u045d\u045b\3")
        buf.write("\2\2\2\u045d\u045c\3\2\2\2\u045e\u04c3\3\2\2\2\u045f\u0460")
        buf.write("\f\24\2\2\u0460\u0461\5\u0092J\2\u0461\u0462\5P)\25\u0462")
        buf.write("\u04c2\3\2\2\2\u0463\u046c\f\23\2\2\u0464\u046d\5\u00bc")
        buf.write("_\2\u0465\u0466\5\u00bc_\2\u0466\u0467\5\u00c0a\2\u0467")
        buf.write("\u046d\3\2\2\2\u0468\u046d\5\u00be`\2\u0469\u046d\7O\2")
        buf.write("\2\u046a\u046d\7e\2\2\u046b\u046d\7x\2\2\u046c\u0464\3")
        buf.write("\2\2\2\u046c\u0465\3\2\2\2\u046c\u0468\3\2\2\2\u046c\u0469")
        buf.write("\3\2\2\2\u046c\u046a\3\2\2\2\u046c\u046b\3\2\2\2\u046d")
        buf.write("\u046e\3\2\2\2\u046e\u04c2\5P)\24\u046f\u0470\f\21\2\2")
        buf.write("\u0470\u0471\5\u0098M\2\u0471\u0472\5P)\22\u0472\u04c2")
        buf.write("\3\2\2\2\u0473\u0474\f\20\2\2\u0474\u0475\5\u009aN\2\u0475")
        buf.write("\u0476\5P)\21\u0476\u04c2\3\2\2\2\u0477\u0478\f\b\2\2")
        buf.write("\u0478\u047a\5\u00bc_\2\u0479\u047b\5\u00c0a\2\u047a\u0479")
        buf.write("\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c\3\2\2\2\u047c")
        buf.write("\u047d\5P)\t\u047d\u04c2\3\2\2\2\u047e\u0480\f\7\2\2\u047f")
        buf.write("\u0481\7h\2\2\u0480\u047f\3\2\2\2\u0480\u0481\3\2\2\2")
        buf.write("\u0481\u0482\3\2\2\2\u0482\u0483\5\u009eP\2\u0483\u0484")
        buf.write("\5P)\2\u0484\u0485\5\u0098M\2\u0485\u0486\5P)\b\u0486")
        buf.write("\u04c2\3\2\2\2\u0487\u0488\f\22\2\2\u0488\u04c2\5\u008e")
        buf.write("H\2\u0489\u048a\f\f\2\2\u048a\u048b\7/\2\2\u048b\u04c2")
        buf.write("\5\u00d4k\2\u048c\u048e\f\13\2\2\u048d\u048f\7h\2\2\u048e")
        buf.write("\u048d\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490\3\2\2\2")
        buf.write("\u0490\u0493\5\u008eH\2\u0491\u0492\7E\2\2\u0492\u0494")
        buf.write("\5P)\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u04c2")
        buf.write("\3\2\2\2\u0495\u0497\f\n\2\2\u0496\u0498\7h\2\2\u0497")
        buf.write("\u0496\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499\3\2\2\2")
        buf.write("\u0499\u049a\t\6\2\2\u049a\u049d\5P)\2\u049b\u049c\7E")
        buf.write("\2\2\u049c\u049e\5P)\2\u049d\u049b\3\2\2\2\u049d\u049e")
        buf.write("\3\2\2\2\u049e\u04c2\3\2\2\2\u049f\u04a5\f\t\2\2\u04a0")
        buf.write("\u04a6\7_\2\2\u04a1\u04a6\7i\2\2\u04a2\u04a3\5\u00c0a")
        buf.write("\2\u04a3\u04a4\5\u00b2Z\2\u04a4\u04a6\3\2\2\2\u04a5\u04a0")
        buf.write("\3\2\2\2\u04a5\u04a1\3\2\2\2\u04a5\u04a2\3\2\2\2\u04a6")
        buf.write("\u04c2\3\2\2\2\u04a7\u04a9\f\6\2\2\u04a8\u04aa\7h\2\2")
        buf.write("\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab\3")
        buf.write("\2\2\2\u04ab\u04bf\5\u00be`\2\u04ac\u04b6\7\5\2\2\u04ad")
        buf.write("\u04b7\5> \2\u04ae\u04b3\5P)\2\u04af\u04b0\7\7\2\2\u04b0")
        buf.write("\u04b2\5P)\2\u04b1\u04af\3\2\2\2\u04b2\u04b5\3\2\2\2\u04b3")
        buf.write("\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b7\3\2\2\2")
        buf.write("\u04b5\u04b3\3\2\2\2\u04b6\u04ad\3\2\2\2\u04b6\u04ae\3")
        buf.write("\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04c0")
        buf.write("\7\6\2\2\u04b9\u04ba\5\u00caf\2\u04ba\u04bb\7\4\2\2\u04bb")
        buf.write("\u04bd\3\2\2\2\u04bc\u04b9\3\2\2\2\u04bc\u04bd\3\2\2\2")
        buf.write("\u04bd\u04be\3\2\2\2\u04be\u04c0\5\u00ccg\2\u04bf\u04ac")
        buf.write("\3\2\2\2\u04bf\u04bc\3\2\2\2\u04c0\u04c2\3\2\2\2\u04c1")
        buf.write("\u045f\3\2\2\2\u04c1\u0463\3\2\2\2\u04c1\u046f\3\2\2\2")
        buf.write("\u04c1\u0473\3\2\2\2\u04c1\u0477\3\2\2\2\u04c1\u047e\3")
        buf.write("\2\2\2\u04c1\u0487\3\2\2\2\u04c1\u0489\3\2\2\2\u04c1\u048c")
        buf.write("\3\2\2\2\u04c1\u0495\3\2\2\2\u04c1\u049f\3\2\2\2\u04c1")
        buf.write("\u04a7\3\2\2\2\u04c2\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2")
        buf.write("\u04c3\u04c4\3\2\2\2\u04c4Q\3\2\2\2\u04c5\u04c3\3\2\2")
        buf.write("\2\u04c6\u04c7\7w\2\2\u04c7\u04d3\5\u00d6l\2\u04c8\u04c9")
        buf.write("\7\5\2\2\u04c9\u04ce\5\u00d2j\2\u04ca\u04cb\7\7\2\2\u04cb")
        buf.write("\u04cd\5\u00d2j\2\u04cc\u04ca\3\2\2\2\u04cd\u04d0\3\2")
        buf.write("\2\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d1")
        buf.write("\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d1\u04d2\7\6\2\2\u04d2")
        buf.write("\u04d4\3\2\2\2\u04d3\u04c8\3\2\2\2\u04d3\u04d4\3\2\2\2")
        buf.write("\u04d4\u04e7\3\2\2\2\u04d5\u04d6\7m\2\2\u04d6\u04df\t")
        buf.write("\7\2\2\u04d7\u04d8\7\u0083\2\2\u04d8\u04e0\7j\2\2\u04d9")
        buf.write("\u04da\7\u0083\2\2\u04da\u04e0\7:\2\2\u04db\u04e0\7+\2")
        buf.write("\2\u04dc\u04e0\7}\2\2\u04dd\u04de\7g\2\2\u04de\u04e0\7")
        buf.write("\34\2\2\u04df\u04d7\3\2\2\2\u04df\u04d9\3\2\2\2\u04df")
        buf.write("\u04db\3\2\2\2\u04df\u04dc\3\2\2\2\u04df\u04dd\3\2\2\2")
        buf.write("\u04e0\u04e4\3\2\2\2\u04e1\u04e2\7e\2\2\u04e2\u04e4\5")
        buf.write("\u00c6d\2\u04e3\u04d5\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4")
        buf.write("\u04e6\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e6\u04e9\3\2\2\2")
        buf.write("\u04e7\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04f4\3")
        buf.write("\2\2\2\u04e9\u04e7\3\2\2\2\u04ea\u04ec\7h\2\2\u04eb\u04ea")
        buf.write("\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed")
        buf.write("\u04f2\7;\2\2\u04ee\u04ef\7X\2\2\u04ef\u04f3\7<\2\2\u04f0")
        buf.write("\u04f1\7X\2\2\u04f1\u04f3\7T\2\2\u04f2\u04ee\3\2\2\2\u04f2")
        buf.write("\u04f0\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f5\3\2\2\2")
        buf.write("\u04f4\u04eb\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5S\3\2\2")
        buf.write("\2\u04f6\u04f7\7u\2\2\u04f7\u04fc\7\5\2\2\u04f8\u04fd")
        buf.write("\7S\2\2\u04f9\u04fa\t\b\2\2\u04fa\u04fb\7\7\2\2\u04fb")
        buf.write("\u04fd\5z>\2\u04fc\u04f8\3\2\2\2\u04fc\u04f9\3\2\2\2\u04fd")
        buf.write("\u04fe\3\2\2\2\u04fe\u04ff\7\6\2\2\u04ffU\3\2\2\2\u0500")
        buf.write("\u0503\5\u00d2j\2\u0501\u0502\7/\2\2\u0502\u0504\5\u00d4")
        buf.write("k\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0507")
        buf.write("\3\2\2\2\u0505\u0508\5\u009cO\2\u0506\u0508\7>\2\2\u0507")
        buf.write("\u0505\3\2\2\2\u0507\u0506\3\2\2\2\u0507\u0508\3\2\2\2")
        buf.write("\u0508W\3\2\2\2\u0509\u050a\7\63\2\2\u050a\u050c\5\u00c6")
        buf.write("d\2\u050b\u0509\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u0531")
        buf.write("\3\2\2\2\u050d\u050e\7s\2\2\u050e\u0511\7a\2\2\u050f\u0511")
        buf.write("\7\u008c\2\2\u0510\u050d\3\2\2\2\u0510\u050f\3\2\2\2\u0511")
        buf.write("\u0512\3\2\2\2\u0512\u0513\7\5\2\2\u0513\u0518\5V,\2\u0514")
        buf.write("\u0515\7\7\2\2\u0515\u0517\5V,\2\u0516\u0514\3\2\2\2\u0517")
        buf.write("\u051a\3\2\2\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2\2")
        buf.write("\u0519\u051b\3\2\2\2\u051a\u0518\3\2\2\2\u051b\u051c\7")
        buf.write("\6\2\2\u051c\u051d\5N(\2\u051d\u0532\3\2\2\2\u051e\u051f")
        buf.write("\7.\2\2\u051f\u0520\7\5\2\2\u0520\u0521\5P)\2\u0521\u0522")
        buf.write("\7\6\2\2\u0522\u0532\3\2\2\2\u0523\u0524\7L\2\2\u0524")
        buf.write("\u0525\7a\2\2\u0525\u0526\7\5\2\2\u0526\u052b\5\u00d2")
        buf.write("j\2\u0527\u0528\7\7\2\2\u0528\u052a\5\u00d2j\2\u0529\u0527")
        buf.write("\3\2\2\2\u052a\u052d\3\2\2\2\u052b\u0529\3\2\2\2\u052b")
        buf.write("\u052c\3\2\2\2\u052c\u052e\3\2\2\2\u052d\u052b\3\2\2\2")
        buf.write("\u052e\u052f\7\6\2\2\u052f\u0530\5R*\2\u0530\u0532\3\2")
        buf.write("\2\2\u0531\u0510\3\2\2\2\u0531\u051e\3\2\2\2\u0531\u0523")
        buf.write("\3\2\2\2\u0532Y\3\2\2\2\u0533\u0535\7\u0095\2\2\u0534")
        buf.write("\u0536\7v\2\2\u0535\u0534\3\2\2\2\u0535\u0536\3\2\2\2")
        buf.write("\u0536\u0537\3\2\2\2\u0537\u0538\5r:\2\u0538\u0539\7#")
        buf.write("\2\2\u0539\u053a\7\5\2\2\u053a\u053b\5> \2\u053b\u0545")
        buf.write("\7\6\2\2\u053c\u053d\7\7\2\2\u053d\u053e\5r:\2\u053e\u053f")
        buf.write("\7#\2\2\u053f\u0540\7\5\2\2\u0540\u0541\5> \2\u0541\u0542")
        buf.write("\7\6\2\2\u0542\u0544\3\2\2\2\u0543\u053c\3\2\2\2\u0544")
        buf.write("\u0547\3\2\2\2\u0545\u0543\3\2\2\2\u0545\u0546\3\2\2\2")
        buf.write("\u0546[\3\2\2\2\u0547\u0545\3\2\2\2\u0548\u0549\5\u00ca")
        buf.write("f\2\u0549\u054a\7\4\2\2\u054a\u054c\3\2\2\2\u054b\u0548")
        buf.write("\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054d\3\2\2\2\u054d")
        buf.write("\u0554\5\u00ccg\2\u054e\u054f\7W\2\2\u054f\u0550\7*\2")
        buf.write("\2\u0550\u0555\5\u00d8m\2\u0551\u0552\5\u00c0a\2\u0552")
        buf.write("\u0553\7W\2\2\u0553\u0555\3\2\2\2\u0554\u054e\3\2\2\2")
        buf.write("\u0554\u0551\3\2\2\2\u0554\u0555\3\2\2\2\u0555]\3\2\2")
        buf.write("\2\u0556\u0559\5P)\2\u0557\u0558\7/\2\2\u0558\u055a\5")
        buf.write("\u00d4k\2\u0559\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a")
        buf.write("\u055d\3\2\2\2\u055b\u055e\5\u009cO\2\u055c\u055e\5\u00ba")
        buf.write("^\2\u055d\u055b\3\2\2\2\u055d\u055c\3\2\2\2\u055d\u055e")
        buf.write("\3\2\2\2\u055e_\3\2\2\2\u055f\u0563\5t;\2\u0560\u0563")
        buf.write("\5\u00c6d\2\u0561\u0563\5\u00b6\\\2\u0562\u055f\3\2\2")
        buf.write("\2\u0562\u0560\3\2\2\2\u0562\u0561\3\2\2\2\u0563a\3\2")
        buf.write("\2\2\u0564\u0570\5\u00ccg\2\u0565\u0566\7\5\2\2\u0566")
        buf.write("\u056b\5\u00d2j\2\u0567\u0568\7\7\2\2\u0568\u056a\5\u00d2")
        buf.write("j\2\u0569\u0567\3\2\2\2\u056a\u056d\3\2\2\2\u056b\u0569")
        buf.write("\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056e\3\2\2\2\u056d")
        buf.write("\u056b\3\2\2\2\u056e\u056f\7\6\2\2\u056f\u0571\3\2\2\2")
        buf.write("\u0570\u0565\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0572\3")
        buf.write("\2\2\2\u0572\u0573\7#\2\2\u0573\u0574\7\5\2\2\u0574\u0575")
        buf.write("\5> \2\u0575\u0576\7\6\2\2\u0576c\3\2\2\2\u0577\u0584")
        buf.write("\7\t\2\2\u0578\u0579\5\u00ccg\2\u0579\u057a\7\4\2\2\u057a")
        buf.write("\u057b\7\t\2\2\u057b\u0584\3\2\2\2\u057c\u0581\5P)\2\u057d")
        buf.write("\u057f\7#\2\2\u057e\u057d\3\2\2\2\u057e\u057f\3\2\2\2")
        buf.write("\u057f\u0580\3\2\2\2\u0580\u0582\5~@\2\u0581\u057e\3\2")
        buf.write("\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2\u0583\u0577")
        buf.write("\3\2\2\2\u0583\u0578\3\2\2\2\u0583\u057c\3\2\2\2\u0584")
        buf.write("e\3\2\2\2\u0585\u0586\5\u00caf\2\u0586\u0587\7\4\2\2\u0587")
        buf.write("\u0589\3\2\2\2\u0588\u0585\3\2\2\2\u0588\u0589\3\2\2\2")
        buf.write("\u0589\u058a\3\2\2\2\u058a\u058f\5\u00ccg\2\u058b\u058d")
        buf.write("\7#\2\2\u058c\u058b\3\2\2\2\u058c\u058d\3\2\2\2\u058d")
        buf.write("\u058e\3\2\2\2\u058e\u0590\5\u00e4s\2\u058f\u058c\3\2")
        buf.write("\2\2\u058f\u0590\3\2\2\2\u0590\u0597\3\2\2\2\u0591\u0592")
        buf.write("\7W\2\2\u0592\u0593\7*\2\2\u0593\u0598\5\u00d8m\2\u0594")
        buf.write("\u0595\5\u00c0a\2\u0595\u0596\7W\2\2\u0596\u0598\3\2\2")
        buf.write("\2\u0597\u0591\3\2\2\2\u0597\u0594\3\2\2\2\u0597\u0598")
        buf.write("\3\2\2\2\u0598\u05b6\3\2\2\2\u0599\u05a3\7\5\2\2\u059a")
        buf.write("\u059f\5f\64\2\u059b\u059c\7\7\2\2\u059c\u059e\5f\64\2")
        buf.write("\u059d\u059b\3\2\2\2\u059e\u05a1\3\2\2\2\u059f\u059d\3")
        buf.write("\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a4\3\2\2\2\u05a1\u059f")
        buf.write("\3\2\2\2\u05a2\u05a4\5h\65\2\u05a3\u059a\3\2\2\2\u05a3")
        buf.write("\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05aa\7\6\2\2")
        buf.write("\u05a6\u05a8\7#\2\2\u05a7\u05a6\3\2\2\2\u05a7\u05a8\3")
        buf.write("\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05ab\5\u00e4s\2\u05aa")
        buf.write("\u05a7\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05b6\3\2\2\2")
        buf.write("\u05ac\u05ad\7\5\2\2\u05ad\u05ae\5> \2\u05ae\u05b3\7\6")
        buf.write("\2\2\u05af\u05b1\7#\2\2\u05b0\u05af\3\2\2\2\u05b0\u05b1")
        buf.write("\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b4\5\u00e4s\2\u05b3")
        buf.write("\u05b0\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b6\3\2\2\2")
        buf.write("\u05b5\u0588\3\2\2\2\u05b5\u0599\3\2\2\2\u05b5\u05ac\3")
        buf.write("\2\2\2\u05b6g\3\2\2\2\u05b7\u05be\5f\64\2\u05b8\u05b9")
        buf.write("\5j\66\2\u05b9\u05ba\5f\64\2\u05ba\u05bb\5l\67\2\u05bb")
        buf.write("\u05bd\3\2\2\2\u05bc\u05b8\3\2\2\2\u05bd\u05c0\3\2\2\2")
        buf.write("\u05be\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2\u05bfi\3\2\2")
        buf.write("\2\u05c0\u05be\3\2\2\2\u05c1\u05cf\7\7\2\2\u05c2\u05c4")
        buf.write("\7f\2\2\u05c3\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4")
        buf.write("\u05cb\3\2\2\2\u05c5\u05c7\5\u00a2R\2\u05c6\u05c8\5\u00a4")
        buf.write("S\2\u05c7\u05c6\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05cc")
        buf.write("\3\2\2\2\u05c9\u05cc\5\u00a6T\2\u05ca\u05cc\5\u00a8U\2")
        buf.write("\u05cb\u05c5\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cb\u05ca\3")
        buf.write("\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05cf")
        buf.write("\5\u00aaV\2\u05ce\u05c1\3\2\2\2\u05ce\u05c3\3\2\2\2\u05cf")
        buf.write("k\3\2\2\2\u05d0\u05d1\7m\2\2\u05d1\u05df\5P)\2\u05d2\u05d3")
        buf.write("\7\u008e\2\2\u05d3\u05d4\7\5\2\2\u05d4\u05d9\5\u00d2j")
        buf.write("\2\u05d5\u05d6\7\7\2\2\u05d6\u05d8\5\u00d2j\2\u05d7\u05d5")
        buf.write("\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9")
        buf.write("\u05da\3\2\2\2\u05da\u05dc\3\2\2\2\u05db\u05d9\3\2\2\2")
        buf.write("\u05dc\u05dd\7\6\2\2\u05dd\u05df\3\2\2\2\u05de\u05d0\3")
        buf.write("\2\2\2\u05de\u05d2\3\2\2\2\u05de\u05df\3\2\2\2\u05dfm")
        buf.write("\3\2\2\2\u05e0\u05e2\5\u0080A\2\u05e1\u05e3\5\u0082B\2")
        buf.write("\u05e2\u05e1\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e5\3")
        buf.write("\2\2\2\u05e4\u05e6\5\u0088E\2\u05e5\u05e4\3\2\2\2\u05e5")
        buf.write("\u05e6\3\2\2\2\u05e6\u05e8\3\2\2\2\u05e7\u05e9\5\u0086")
        buf.write("D\2\u05e8\u05e7\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u0607")
        buf.write("\3\2\2\2\u05ea\u05eb\7\u0090\2\2\u05eb\u05ec\7\5\2\2\u05ec")
        buf.write("\u05f1\5P)\2\u05ed\u05ee\7\7\2\2\u05ee\u05f0\5P)\2\u05ef")
        buf.write("\u05ed\3\2\2\2\u05f0\u05f3\3\2\2\2\u05f1\u05ef\3\2\2\2")
        buf.write("\u05f1\u05f2\3\2\2\2\u05f2\u05f4\3\2\2\2\u05f3\u05f1\3")
        buf.write("\2\2\2\u05f4\u0603\7\6\2\2\u05f5\u05f6\7\7\2\2\u05f6\u05f7")
        buf.write("\7\5\2\2\u05f7\u05fc\5P)\2\u05f8\u05f9\7\7\2\2\u05f9\u05fb")
        buf.write("\5P)\2\u05fa\u05f8\3\2\2\2\u05fb\u05fe\3\2\2\2\u05fc\u05fa")
        buf.write("\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05ff\3\2\2\2\u05fe")
        buf.write("\u05fc\3\2\2\2\u05ff\u0600\7\6\2\2\u0600\u0602\3\2\2\2")
        buf.write("\u0601\u05f5\3\2\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3")
        buf.write("\2\2\2\u0603\u0604\3\2\2\2\u0604\u0607\3\2\2\2\u0605\u0603")
        buf.write("\3\2\2\2\u0606\u05e0\3\2\2\2\u0606\u05ea\3\2\2\2\u0607")
        buf.write("o\3\2\2\2\u0608\u060e\7\u008b\2\2\u0609\u060a\7\u008b")
        buf.write("\2\2\u060a\u060e\7\37\2\2\u060b\u060e\7\\\2\2\u060c\u060e")
        buf.write("\7F\2\2\u060d\u0608\3\2\2\2\u060d\u0609\3\2\2\2\u060d")
        buf.write("\u060b\3\2\2\2\u060d\u060c\3\2\2\2\u060eq\3\2\2\2\u060f")
        buf.write("\u061b\5\u00ccg\2\u0610\u0611\7\5\2\2\u0611\u0616\5\u00d2")
        buf.write("j\2\u0612\u0613\7\7\2\2\u0613\u0615\5\u00d2j\2\u0614\u0612")
        buf.write("\3\2\2\2\u0615\u0618\3\2\2\2\u0616\u0614\3\2\2\2\u0616")
        buf.write("\u0617\3\2\2\2\u0617\u0619\3\2\2\2\u0618\u0616\3\2\2\2")
        buf.write("\u0619\u061a\7\6\2\2\u061a\u061c\3\2\2\2\u061b\u0610\3")
        buf.write("\2\2\2\u061b\u061c\3\2\2\2\u061cs\3\2\2\2\u061d\u061f")
        buf.write("\t\t\2\2\u061e\u061d\3\2\2\2\u061e\u061f\3\2\2\2\u061f")
        buf.write("\u0620\3\2\2\2\u0620\u0621\5\u00b4[\2\u0621u\3\2\2\2\u0622")
        buf.write("\u062a\5\u00b4[\2\u0623\u062a\5\u00b6\\\2\u0624\u062a")
        buf.write("\5\u00b8]\2\u0625\u062a\5\u00b2Z\2\u0626\u062a\5\u00ae")
        buf.write("X\2\u0627\u062a\5\u00acW\2\u0628\u062a\5\u00b0Y\2\u0629")
        buf.write("\u0622\3\2\2\2\u0629\u0623\3\2\2\2\u0629\u0624\3\2\2\2")
        buf.write("\u0629\u0625\3\2\2\2\u0629\u0626\3\2\2\2\u0629\u0627\3")
        buf.write("\2\2\2\u0629\u0628\3\2\2\2\u062aw\3\2\2\2\u062b\u062c")
        buf.write("\t\n\2\2\u062cy\3\2\2\2\u062d\u062e\7\u009a\2\2\u062e")
        buf.write("{\3\2\2\2\u062f\u0632\5P)\2\u0630\u0632\5H%\2\u0631\u062f")
        buf.write("\3\2\2\2\u0631\u0630\3\2\2\2\u0632}\3\2\2\2\u0633\u0634")
        buf.write("\t\13\2\2\u0634\177\3\2\2\2\u0635\u0638\7\u0082\2\2\u0636")
        buf.write("\u0639\5\u0094K\2\u0637\u0639\7\37\2\2\u0638\u0636\3\2")
        buf.write("\2\2\u0638\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063a")
        buf.write("\3\2\2\2\u063a\u063f\5d\63\2\u063b\u063c\7\7\2\2\u063c")
        buf.write("\u063e\5d\63\2\u063d\u063b\3\2\2\2\u063e\u0641\3\2\2\2")
        buf.write("\u063f\u063d\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0081\3")
        buf.write("\2\2\2\u0641\u063f\3\2\2\2\u0642\u064c\7M\2\2\u0643\u0648")
        buf.write("\5f\64\2\u0644\u0645\7\7\2\2\u0645\u0647\5f\64\2\u0646")
        buf.write("\u0644\3\2\2\2\u0647\u064a\3\2\2\2\u0648\u0646\3\2\2\2")
        buf.write("\u0648\u0649\3\2\2\2\u0649\u064d\3\2\2\2\u064a\u0648\3")
        buf.write("\2\2\2\u064b\u064d\5h\65\2\u064c\u0643\3\2\2\2\u064c\u064b")
        buf.write("\3\2\2\2\u064d\u0083\3\2\2\2\u064e\u064f\7Q\2\2\u064f")
        buf.write("\u0650\5P)\2\u0650\u0085\3\2\2\2\u0651\u0652\7P\2\2\u0652")
        buf.write("\u0653\7*\2\2\u0653\u0658\5P)\2\u0654\u0655\7\7\2\2\u0655")
        buf.write("\u0657\5P)\2\u0656\u0654\3\2\2\2\u0657\u065a\3\2\2\2\u0658")
        buf.write("\u0656\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065c\3\2\2\2")
        buf.write("\u065a\u0658\3\2\2\2\u065b\u065d\5\u0084C\2\u065c\u065b")
        buf.write("\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u0087\3\2\2\2\u065e")
        buf.write("\u065f\7\u0094\2\2\u065f\u0660\5P)\2\u0660\u0089\3\2\2")
        buf.write("\2\u0661\u0662\7o\2\2\u0662\u0663\7*\2\2\u0663\u0668\5")
        buf.write("^\60\2\u0664\u0665\7\7\2\2\u0665\u0667\5^\60\2\u0666\u0664")
        buf.write("\3\2\2\2\u0667\u066a\3\2\2\2\u0668\u0666\3\2\2\2\u0668")
        buf.write("\u0669\3\2\2\2\u0669\u008b\3\2\2\2\u066a\u0668\3\2\2\2")
        buf.write("\u066b\u066c\7d\2\2\u066c\u066f\5P)\2\u066d\u066e\t\f")
        buf.write("\2\2\u066e\u0670\5P)\2\u066f\u066d\3\2\2\2\u066f\u0670")
        buf.write("\3\2\2\2\u0670\u008d\3\2\2\2\u0671\u0672\7c\2\2\u0672")
        buf.write("\u0673\5P)\2\u0673\u008f\3\2\2\2\u0674\u0676\7,\2\2\u0675")
        buf.write("\u0677\5P)\2\u0676\u0675\3\2\2\2\u0676\u0677\3\2\2\2\u0677")
        buf.write("\u067d\3\2\2\2\u0678\u0679\7\u0093\2\2\u0679\u067a\5P")
        buf.write(")\2\u067a\u067b\7\u0087\2\2\u067b\u067c\5P)\2\u067c\u067e")
        buf.write("\3\2\2\2\u067d\u0678\3\2\2\2\u067e\u067f\3\2\2\2\u067f")
        buf.write("\u067d\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0683\3\2\2\2")
        buf.write("\u0681\u0682\7C\2\2\u0682\u0684\5P)\2\u0683\u0681\3\2")
        buf.write("\2\2\u0683\u0684\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686")
        buf.write("\7D\2\2\u0686\u0091\3\2\2\2\u0687\u0688\t\r\2\2\u0688")
        buf.write("\u0093\3\2\2\2\u0689\u068a\7@\2\2\u068a\u0095\3\2\2\2")
        buf.write("\u068b\u068c\7\37\2\2\u068c\u0097\3\2\2\2\u068d\u068e")
        buf.write('\7"\2\2\u068e\u0099\3\2\2\2\u068f\u0690\7n\2\2\u0690')
        buf.write("\u009b\3\2\2\2\u0691\u0692\7$\2\2\u0692\u009d\3\2\2\2")
        buf.write("\u0693\u0694\7)\2\2\u0694\u009f\3\2\2\2\u0695\u0696\7")
        buf.write("f\2\2\u0696\u00a1\3\2\2\2\u0697\u0698\7b\2\2\u0698\u00a3")
        buf.write("\3\2\2\2\u0699\u069a\7p\2\2\u069a\u00a5\3\2\2\2\u069b")
        buf.write("\u069c\7Y\2\2\u069c\u00a7\3\2\2\2\u069d\u069e\7\65\2\2")
        buf.write("\u069e\u00a9\3\2\2\2\u069f\u06a0\7`\2\2\u06a0\u00ab\3")
        buf.write("\2\2\2\u06a1\u06a2\7\66\2\2\u06a2\u00ad\3\2\2\2\u06a3")
        buf.write("\u06a4\7\67\2\2\u06a4\u00af\3\2\2\2\u06a5\u06a6\78\2\2")
        buf.write("\u06a6\u00b1\3\2\2\2\u06a7\u06a8\7j\2\2\u06a8\u00b3\3")
        buf.write("\2\2\2\u06a9\u06aa\7\u0098\2\2\u06aa\u00b5\3\2\2\2\u06ab")
        buf.write("\u06ac\7\u009a\2\2\u06ac\u00b7\3\2\2\2\u06ad\u06ae\7\u009b")
        buf.write("\2\2\u06ae\u00b9\3\2\2\2\u06af\u06b0\7>\2\2\u06b0\u00bb")
        buf.write("\3\2\2\2\u06b1\u06b2\7^\2\2\u06b2\u00bd\3\2\2\2\u06b3")
        buf.write("\u06b4\7U\2\2\u06b4\u00bf\3\2\2\2\u06b5\u06b6\7h\2\2\u06b6")
        buf.write("\u00c1\3\2\2\2\u06b7\u06b8\7H\2\2\u06b8\u00c3\3\2\2\2")
        buf.write("\u06b9\u06ba\t\16\2\2\u06ba\u00c5\3\2\2\2\u06bb\u06bc")
        buf.write("\5\u00e8u\2\u06bc\u00c7\3\2\2\2\u06bd\u06be\5\u00e8u\2")
        buf.write("\u06be\u00c9\3\2\2\2\u06bf\u06c0\5\u00e8u\2\u06c0\u00cb")
        buf.write("\3\2\2\2\u06c1\u06c2\5\u00e8u\2\u06c2\u00cd\3\2\2\2\u06c3")
        buf.write("\u06c4\5\u00e8u\2\u06c4\u00cf\3\2\2\2\u06c5\u06c6\5\u00e8")
        buf.write("u\2\u06c6\u00d1\3\2\2\2\u06c7\u06c8\5\u00e8u\2\u06c8\u00d3")
        buf.write("\3\2\2\2\u06c9\u06ca\5\u00e8u\2\u06ca\u00d5\3\2\2\2\u06cb")
        buf.write("\u06cc\5\u00e8u\2\u06cc\u00d7\3\2\2\2\u06cd\u06ce\5\u00e8")
        buf.write("u\2\u06ce\u00d9\3\2\2\2\u06cf\u06d0\5\u00e8u\2\u06d0\u00db")
        buf.write("\3\2\2\2\u06d1\u06d2\5\u00e8u\2\u06d2\u00dd\3\2\2\2\u06d3")
        buf.write("\u06d4\5\u00e8u\2\u06d4\u00df\3\2\2\2\u06d5\u06d6\5\u00e8")
        buf.write("u\2\u06d6\u00e1\3\2\2\2\u06d7\u06d8\5\u00e8u\2\u06d8\u00e3")
        buf.write("\3\2\2\2\u06d9\u06da\5\u00e8u\2\u06da\u00e5\3\2\2\2\u06db")
        buf.write("\u06dc\5\u00e8u\2\u06dc\u00e7\3\2\2\2\u06dd\u06e5\7\u0097")
        buf.write("\2\2\u06de\u06e5\5\u00c4c\2\u06df\u06e5\7\u009a\2\2\u06e0")
        buf.write("\u06e1\7\5\2\2\u06e1\u06e2\5\u00e8u\2\u06e2\u06e3\7\6")
        buf.write("\2\2\u06e3\u06e5\3\2\2\2\u06e4\u06dd\3\2\2\2\u06e4\u06de")
        buf.write("\3\2\2\2\u06e4\u06df\3\2\2\2\u06e4\u06e0\3\2\2\2\u06e5")
        buf.write("\u00e9\3\2\2\2\u00e9\u00ec\u00ee\u00f9\u0100\u0105\u010b")
        buf.write("\u0111\u0113\u0133\u013a\u0142\u0145\u014e\u0152\u015a")
        buf.write("\u015e\u0160\u0165\u0167\u016b\u0172\u0175\u017a\u017e")
        buf.write("\u0183\u0186\u0189\u018d\u0193\u0198\u01a3\u01a8\u01ac")
        buf.write("\u01b2\u01b7\u01c0\u01c7\u01cd\u01d1\u01d5\u01db\u01e0")
        buf.write("\u01e7\u01f2\u01f5\u01f7\u01fd\u0203\u0207\u020e\u0214")
        buf.write("\u021a\u0220\u0225\u0231\u0236\u0241\u0246\u0249\u024f")
        buf.write("\u0252\u0258\u025b\u025e\u0262\u026a\u026f\u0277\u027c")
        buf.write("\u0284\u0289\u0291\u0296\u029c\u02a3\u02a6\u02ae\u02b2")
        buf.write("\u02b5\u02b8\u02cb\u02d1\u02da\u02df\u02e8\u02f3\u02fa")
        buf.write("\u0300\u0306\u030f\u0316\u031a\u031c\u0320\u0327\u0329")
        buf.write("\u032d\u0330\u0337\u033e\u0341\u0345\u0348\u034c\u0353")
        buf.write("\u0356\u035e\u0362\u0365\u0369\u036c\u036f\u0378\u0383")
        buf.write("\u038a\u038d\u0390\u039d\u03ab\u03af\u03b2\u03bf\u03cd")
        buf.write("\u03d1\u03d4\u03d7\u03dd\u03e2\u03e8\u03f4\u03f8\u03fe")
        buf.write("\u0402\u0405\u0417\u041c\u0421\u0429\u042e\u0437\u043e")
        buf.write("\u0442\u0452\u0455\u045d\u046c\u047a\u0480\u048e\u0493")
        buf.write("\u0497\u049d\u04a5\u04a9\u04b3\u04b6\u04bc\u04bf\u04c1")
        buf.write("\u04c3\u04ce\u04d3\u04df\u04e3\u04e7\u04eb\u04f2\u04f4")
        buf.write("\u04fc\u0503\u0507\u050b\u0510\u0518\u052b\u0531\u0535")
        buf.write("\u0545\u054b\u0554\u0559\u055d\u0562\u056b\u0570\u057e")
        buf.write("\u0581\u0583\u0588\u058c\u058f\u0597\u059f\u05a3\u05a7")
        buf.write("\u05aa\u05b0\u05b3\u05b5\u05be\u05c3\u05c7\u05cb\u05ce")
        buf.write("\u05d9\u05de\u05e2\u05e5\u05e8\u05f1\u05fc\u0603\u0606")
        buf.write("\u060d\u0616\u061b\u061e\u0629\u0631\u0638\u063f\u0648")
        buf.write("\u064c\u0658\u065c\u0668\u066f\u0676\u067f\u0683\u06e4")
        return buf.getvalue()


class SQLiteParser(Parser):

    grammarFileName = "SQLite.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "';'",
        "'.'",
        "'('",
        "')'",
        "','",
        "'='",
        "'*'",
        "'+'",
        "'-'",
        "'~'",
        "'||'",
        "'/'",
        "'%'",
        "'<<'",
        "'>>'",
        "'&'",
        "'|'",
        "'<'",
        "'<='",
        "'>'",
        "'>='",
        "'=='",
        "'!='",
        "'<>'",
    ]

    symbolicNames = [
        "<INVALID>",
        "SCOL",
        "DOT",
        "OPEN_PAR",
        "CLOSE_PAR",
        "COMMA",
        "ASSIGN",
        "STAR",
        "PLUS",
        "MINUS",
        "TILDE",
        "PIPE2",
        "DIV",
        "MOD",
        "LT2",
        "GT2",
        "AMP",
        "PIPE",
        "LT",
        "LT_EQ",
        "GT",
        "GT_EQ",
        "EQ",
        "NOT_EQ1",
        "NOT_EQ2",
        "K_ABORT",
        "K_ACTION",
        "K_ADD",
        "K_AFTER",
        "K_ALL",
        "K_ALTER",
        "K_ANALYZE",
        "K_AND",
        "K_AS",
        "K_ASC",
        "K_ATTACH",
        "K_AUTOINCREMENT",
        "K_BEFORE",
        "K_BEGIN",
        "K_BETWEEN",
        "K_BY",
        "K_CASCADE",
        "K_CASE",
        "K_CAST",
        "K_CHECK",
        "K_COLLATE",
        "K_COLUMN",
        "K_COMMIT",
        "K_CONFLICT",
        "K_CONSTRAINT",
        "K_CREATE",
        "K_CROSS",
        "K_CURRENT_DATE",
        "K_CURRENT_TIME",
        "K_CURRENT_TIMESTAMP",
        "K_DATABASE",
        "K_DEFAULT",
        "K_DEFERRABLE",
        "K_DEFERRED",
        "K_DELETE",
        "K_DESC",
        "K_DETACH",
        "K_DISTINCT",
        "K_DROP",
        "K_EACH",
        "K_ELSE",
        "K_END",
        "K_ESCAPE",
        "K_EXCEPT",
        "K_EXCLUSIVE",
        "K_EXISTS",
        "K_EXPLAIN",
        "K_FAIL",
        "K_FOR",
        "K_FOREIGN",
        "K_FROM",
        "K_FULL",
        "K_GLOB",
        "K_GROUP",
        "K_HAVING",
        "K_IF",
        "K_IGNORE",
        "K_IMMEDIATE",
        "K_IN",
        "K_INDEX",
        "K_INDEXED",
        "K_INITIALLY",
        "K_INNER",
        "K_INSERT",
        "K_INSTEAD",
        "K_INTERSECT",
        "K_INTO",
        "K_IS",
        "K_ISNULL",
        "K_JOIN",
        "K_KEY",
        "K_LEFT",
        "K_LIKE",
        "K_LIMIT",
        "K_MATCH",
        "K_NATURAL",
        "K_NO",
        "K_NOT",
        "K_NOTNULL",
        "K_NULL",
        "K_OF",
        "K_OFFSET",
        "K_ON",
        "K_OR",
        "K_ORDER",
        "K_OUTER",
        "K_PLAN",
        "K_PRAGMA",
        "K_PRIMARY",
        "K_QUERY",
        "K_RAISE",
        "K_RECURSIVE",
        "K_REFERENCES",
        "K_REGEXP",
        "K_REINDEX",
        "K_RELEASE",
        "K_RENAME",
        "K_REPLACE",
        "K_RESTRICT",
        "K_RIGHT",
        "K_ROLLBACK",
        "K_ROW",
        "K_SAVEPOINT",
        "K_SELECT",
        "K_SET",
        "K_TABLE",
        "K_TEMP",
        "K_TEMPORARY",
        "K_THEN",
        "K_TO",
        "K_TRANSACTION",
        "K_TRIGGER",
        "K_UNION",
        "K_UNIQUE",
        "K_UPDATE",
        "K_USING",
        "K_VACUUM",
        "K_VALUES",
        "K_VIEW",
        "K_VIRTUAL",
        "K_WHEN",
        "K_WHERE",
        "K_WITH",
        "K_WITHOUT",
        "IDENTIFIER",
        "NUMERIC_LITERAL",
        "BIND_PARAMETER",
        "STRING_LITERAL",
        "BLOB_LITERAL",
        "SINGLE_LINE_COMMENT",
        "MULTILINE_COMMENT",
        "SPACES",
        "UNEXPECTED_CHAR",
    ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_compound_select_stmt = 9
    RULE_create_index_stmt = 10
    RULE_create_table_stmt = 11
    RULE_create_trigger_stmt = 12
    RULE_create_view_stmt = 13
    RULE_create_virtual_table_stmt = 14
    RULE_delete_stmt = 15
    RULE_delete_stmt_limited = 16
    RULE_detach_stmt = 17
    RULE_drop_index_stmt = 18
    RULE_drop_table_stmt = 19
    RULE_drop_trigger_stmt = 20
    RULE_drop_view_stmt = 21
    RULE_factored_select_stmt = 22
    RULE_insert_stmt = 23
    RULE_pragma_stmt = 24
    RULE_reindex_stmt = 25
    RULE_release_stmt = 26
    RULE_rollback_stmt = 27
    RULE_savepoint_stmt = 28
    RULE_simple_select_stmt = 29
    RULE_select_stmt = 30
    RULE_select_or_values = 31
    RULE_update_stmt = 32
    RULE_update_stmt_limited = 33
    RULE_vacuum_stmt = 34
    RULE_column_def = 35
    RULE_type_name = 36
    RULE_column_constraint = 37
    RULE_conflict_clause = 38
    RULE_expr = 39
    RULE_foreign_key_clause = 40
    RULE_raise_function = 41
    RULE_indexed_column = 42
    RULE_table_constraint = 43
    RULE_with_clause = 44
    RULE_qualified_table_name = 45
    RULE_ordering_term = 46
    RULE_pragma_value = 47
    RULE_common_table_expression = 48
    RULE_result_column = 49
    RULE_table_or_subquery = 50
    RULE_join_clause = 51
    RULE_join_operator = 52
    RULE_join_constraint = 53
    RULE_select_core = 54
    RULE_compound_operator = 55
    RULE_cte_table_name = 56
    RULE_signed_number = 57
    RULE_literal_value = 58
    RULE_unary_operator = 59
    RULE_error_message = 60
    RULE_module_argument = 61
    RULE_column_alias = 62
    RULE_select_clause = 63
    RULE_from_clause = 64
    RULE_having_clause = 65
    RULE_group_clause = 66
    RULE_where_clause = 67
    RULE_order_clause = 68
    RULE_limit_clause = 69
    RULE_like_clause = 70
    RULE_case_clause = 71
    RULE_binary_operator = 72
    RULE_k_distinct = 73
    RULE_k_all = 74
    RULE_k_and = 75
    RULE_k_or = 76
    RULE_k_asc = 77
    RULE_k_between = 78
    RULE_k_natural = 79
    RULE_k_left = 80
    RULE_k_outer = 81
    RULE_k_inner = 82
    RULE_k_cross = 83
    RULE_k_join = 84
    RULE_k_current_date = 85
    RULE_k_current_time = 86
    RULE_k_current_timestamp = 87
    RULE_k_null = 88
    RULE_numeric_literal = 89
    RULE_string_literal = 90
    RULE_blob_literal = 91
    RULE_k_desc = 92
    RULE_k_is = 93
    RULE_k_in = 94
    RULE_k_not = 95
    RULE_k_exists = 96
    RULE_keyword = 97
    RULE_name = 98
    RULE_function_name = 99
    RULE_database_name = 100
    RULE_table_name = 101
    RULE_table_or_index_name = 102
    RULE_new_table_name = 103
    RULE_column_name = 104
    RULE_collation_name = 105
    RULE_foreign_table = 106
    RULE_index_name = 107
    RULE_trigger_name = 108
    RULE_view_name = 109
    RULE_module_name = 110
    RULE_pragma_name = 111
    RULE_savepoint_name = 112
    RULE_table_alias = 113
    RULE_transaction_name = 114
    RULE_any_name = 115

    ruleNames = [
        "parse",
        "error",
        "sql_stmt_list",
        "sql_stmt",
        "alter_table_stmt",
        "analyze_stmt",
        "attach_stmt",
        "begin_stmt",
        "commit_stmt",
        "compound_select_stmt",
        "create_index_stmt",
        "create_table_stmt",
        "create_trigger_stmt",
        "create_view_stmt",
        "create_virtual_table_stmt",
        "delete_stmt",
        "delete_stmt_limited",
        "detach_stmt",
        "drop_index_stmt",
        "drop_table_stmt",
        "drop_trigger_stmt",
        "drop_view_stmt",
        "factored_select_stmt",
        "insert_stmt",
        "pragma_stmt",
        "reindex_stmt",
        "release_stmt",
        "rollback_stmt",
        "savepoint_stmt",
        "simple_select_stmt",
        "select_stmt",
        "select_or_values",
        "update_stmt",
        "update_stmt_limited",
        "vacuum_stmt",
        "column_def",
        "type_name",
        "column_constraint",
        "conflict_clause",
        "expr",
        "foreign_key_clause",
        "raise_function",
        "indexed_column",
        "table_constraint",
        "with_clause",
        "qualified_table_name",
        "ordering_term",
        "pragma_value",
        "common_table_expression",
        "result_column",
        "table_or_subquery",
        "join_clause",
        "join_operator",
        "join_constraint",
        "select_core",
        "compound_operator",
        "cte_table_name",
        "signed_number",
        "literal_value",
        "unary_operator",
        "error_message",
        "module_argument",
        "column_alias",
        "select_clause",
        "from_clause",
        "having_clause",
        "group_clause",
        "where_clause",
        "order_clause",
        "limit_clause",
        "like_clause",
        "case_clause",
        "binary_operator",
        "k_distinct",
        "k_all",
        "k_and",
        "k_or",
        "k_asc",
        "k_between",
        "k_natural",
        "k_left",
        "k_outer",
        "k_inner",
        "k_cross",
        "k_join",
        "k_current_date",
        "k_current_time",
        "k_current_timestamp",
        "k_null",
        "numeric_literal",
        "string_literal",
        "blob_literal",
        "k_desc",
        "k_is",
        "k_in",
        "k_not",
        "k_exists",
        "keyword",
        "name",
        "function_name",
        "database_name",
        "table_name",
        "table_or_index_name",
        "new_table_name",
        "column_name",
        "collation_name",
        "foreign_table",
        "index_name",
        "trigger_name",
        "view_name",
        "module_name",
        "pragma_name",
        "savepoint_name",
        "table_alias",
        "transaction_name",
        "any_name",
    ]

    EOF = Token.EOF
    SCOL = 1
    DOT = 2
    OPEN_PAR = 3
    CLOSE_PAR = 4
    COMMA = 5
    ASSIGN = 6
    STAR = 7
    PLUS = 8
    MINUS = 9
    TILDE = 10
    PIPE2 = 11
    DIV = 12
    MOD = 13
    LT2 = 14
    GT2 = 15
    AMP = 16
    PIPE = 17
    LT = 18
    LT_EQ = 19
    GT = 20
    GT_EQ = 21
    EQ = 22
    NOT_EQ1 = 23
    NOT_EQ2 = 24
    K_ABORT = 25
    K_ACTION = 26
    K_ADD = 27
    K_AFTER = 28
    K_ALL = 29
    K_ALTER = 30
    K_ANALYZE = 31
    K_AND = 32
    K_AS = 33
    K_ASC = 34
    K_ATTACH = 35
    K_AUTOINCREMENT = 36
    K_BEFORE = 37
    K_BEGIN = 38
    K_BETWEEN = 39
    K_BY = 40
    K_CASCADE = 41
    K_CASE = 42
    K_CAST = 43
    K_CHECK = 44
    K_COLLATE = 45
    K_COLUMN = 46
    K_COMMIT = 47
    K_CONFLICT = 48
    K_CONSTRAINT = 49
    K_CREATE = 50
    K_CROSS = 51
    K_CURRENT_DATE = 52
    K_CURRENT_TIME = 53
    K_CURRENT_TIMESTAMP = 54
    K_DATABASE = 55
    K_DEFAULT = 56
    K_DEFERRABLE = 57
    K_DEFERRED = 58
    K_DELETE = 59
    K_DESC = 60
    K_DETACH = 61
    K_DISTINCT = 62
    K_DROP = 63
    K_EACH = 64
    K_ELSE = 65
    K_END = 66
    K_ESCAPE = 67
    K_EXCEPT = 68
    K_EXCLUSIVE = 69
    K_EXISTS = 70
    K_EXPLAIN = 71
    K_FAIL = 72
    K_FOR = 73
    K_FOREIGN = 74
    K_FROM = 75
    K_FULL = 76
    K_GLOB = 77
    K_GROUP = 78
    K_HAVING = 79
    K_IF = 80
    K_IGNORE = 81
    K_IMMEDIATE = 82
    K_IN = 83
    K_INDEX = 84
    K_INDEXED = 85
    K_INITIALLY = 86
    K_INNER = 87
    K_INSERT = 88
    K_INSTEAD = 89
    K_INTERSECT = 90
    K_INTO = 91
    K_IS = 92
    K_ISNULL = 93
    K_JOIN = 94
    K_KEY = 95
    K_LEFT = 96
    K_LIKE = 97
    K_LIMIT = 98
    K_MATCH = 99
    K_NATURAL = 100
    K_NO = 101
    K_NOT = 102
    K_NOTNULL = 103
    K_NULL = 104
    K_OF = 105
    K_OFFSET = 106
    K_ON = 107
    K_OR = 108
    K_ORDER = 109
    K_OUTER = 110
    K_PLAN = 111
    K_PRAGMA = 112
    K_PRIMARY = 113
    K_QUERY = 114
    K_RAISE = 115
    K_RECURSIVE = 116
    K_REFERENCES = 117
    K_REGEXP = 118
    K_REINDEX = 119
    K_RELEASE = 120
    K_RENAME = 121
    K_REPLACE = 122
    K_RESTRICT = 123
    K_RIGHT = 124
    K_ROLLBACK = 125
    K_ROW = 126
    K_SAVEPOINT = 127
    K_SELECT = 128
    K_SET = 129
    K_TABLE = 130
    K_TEMP = 131
    K_TEMPORARY = 132
    K_THEN = 133
    K_TO = 134
    K_TRANSACTION = 135
    K_TRIGGER = 136
    K_UNION = 137
    K_UNIQUE = 138
    K_UPDATE = 139
    K_USING = 140
    K_VACUUM = 141
    K_VALUES = 142
    K_VIEW = 143
    K_VIRTUAL = 144
    K_WHEN = 145
    K_WHERE = 146
    K_WITH = 147
    K_WITHOUT = 148
    IDENTIFIER = 149
    NUMERIC_LITERAL = 150
    BIND_PARAMETER = 151
    STRING_LITERAL = 152
    BLOB_LITERAL = 153
    SINGLE_LINE_COMMENT = 154
    MULTILINE_COMMENT = 155
    SPACES = 156
    UNEXPECTED_CHAR = 157

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class ParseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext, i)

        def error(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ErrorContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParse"):
                listener.enterParse(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParse"):
                listener.exitParse(self)

    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SQLiteParser.SCOL)
                            | (1 << SQLiteParser.K_ALTER)
                            | (1 << SQLiteParser.K_ANALYZE)
                            | (1 << SQLiteParser.K_ATTACH)
                            | (1 << SQLiteParser.K_BEGIN)
                            | (1 << SQLiteParser.K_COMMIT)
                            | (1 << SQLiteParser.K_CREATE)
                            | (1 << SQLiteParser.K_DELETE)
                            | (1 << SQLiteParser.K_DETACH)
                            | (1 << SQLiteParser.K_DROP)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 66)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 66))
                        & (
                            (1 << (SQLiteParser.K_END - 66))
                            | (1 << (SQLiteParser.K_EXPLAIN - 66))
                            | (1 << (SQLiteParser.K_INSERT - 66))
                            | (1 << (SQLiteParser.K_PRAGMA - 66))
                            | (1 << (SQLiteParser.K_REINDEX - 66))
                            | (1 << (SQLiteParser.K_RELEASE - 66))
                            | (1 << (SQLiteParser.K_REPLACE - 66))
                            | (1 << (SQLiteParser.K_ROLLBACK - 66))
                            | (1 << (SQLiteParser.K_SAVEPOINT - 66))
                            | (1 << (SQLiteParser.K_SELECT - 66))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 139)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 139))
                        & (
                            (1 << (SQLiteParser.K_UPDATE - 139))
                            | (1 << (SQLiteParser.K_VACUUM - 139))
                            | (1 << (SQLiteParser.K_VALUES - 139))
                            | (1 << (SQLiteParser.K_WITH - 139))
                            | (1 << (SQLiteParser.UNEXPECTED_CHAR - 139))
                        )
                    )
                    != 0
                )
            ):
                self.state = 234
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    SQLiteParser.SCOL,
                    SQLiteParser.K_ALTER,
                    SQLiteParser.K_ANALYZE,
                    SQLiteParser.K_ATTACH,
                    SQLiteParser.K_BEGIN,
                    SQLiteParser.K_COMMIT,
                    SQLiteParser.K_CREATE,
                    SQLiteParser.K_DELETE,
                    SQLiteParser.K_DETACH,
                    SQLiteParser.K_DROP,
                    SQLiteParser.K_END,
                    SQLiteParser.K_EXPLAIN,
                    SQLiteParser.K_INSERT,
                    SQLiteParser.K_PRAGMA,
                    SQLiteParser.K_REINDEX,
                    SQLiteParser.K_RELEASE,
                    SQLiteParser.K_REPLACE,
                    SQLiteParser.K_ROLLBACK,
                    SQLiteParser.K_SAVEPOINT,
                    SQLiteParser.K_SELECT,
                    SQLiteParser.K_UPDATE,
                    SQLiteParser.K_VACUUM,
                    SQLiteParser.K_VALUES,
                    SQLiteParser.K_WITH,
                ]:
                    self.state = 232
                    self.sql_stmt_list()
                    pass
                elif token in [SQLiteParser.UNEXPECTED_CHAR]:
                    self.state = 233
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 239
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._UNEXPECTED_CHAR = None  # Token

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterError"):
                listener.enterError(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitError"):
                listener.exitError(self)

    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            localctx._UNEXPECTED_CHAR = self.match(SQLiteParser.UNEXPECTED_CHAR)

            # throw new RuntimeException("UNEXPECTED_CHAR=" + (None if localctx._UNEXPECTED_CHAR is None else localctx._UNEXPECTED_CHAR.text));

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmt_listContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSql_stmt_list"):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSql_stmt_list"):
                listener.exitSql_stmt_list(self)

    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.SCOL:
                self.state = 244
                self.match(SQLiteParser.SCOL)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 250
            self.sql_stmt()
            self.state = 259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 251
                        self.match(SQLiteParser.SCOL)
                        self.state = 254
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == SQLiteParser.SCOL):
                            break

                    self.state = 256
                    self.sql_stmt()
                self.state = 261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

            self.state = 265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 262
                    self.match(SQLiteParser.SCOL)
                self.state = 267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext, 0)

        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext, 0)

        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext, 0)

        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext, 0)

        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext, 0)

        def compound_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Compound_select_stmtContext, 0)

        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext, 0)

        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext, 0)

        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext, 0)

        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext, 0)

        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(
                SQLiteParser.Create_virtual_table_stmtContext, 0
            )

        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext, 0)

        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext, 0)

        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext, 0)

        def drop_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_index_stmtContext, 0)

        def drop_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_table_stmtContext, 0)

        def drop_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_trigger_stmtContext, 0)

        def drop_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_view_stmtContext, 0)

        def factored_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Factored_select_stmtContext, 0)

        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext, 0)

        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext, 0)

        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext, 0)

        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext, 0)

        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext, 0)

        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext, 0)

        def simple_select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_select_stmtContext, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext, 0)

        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext, 0)

        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSql_stmt"):
                listener.enterSql_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSql_stmt"):
                listener.exitSql_stmt(self)

    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_EXPLAIN:
                self.state = 268
                self.match(SQLiteParser.K_EXPLAIN)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_QUERY:
                    self.state = 269
                    self.match(SQLiteParser.K_QUERY)
                    self.state = 270
                    self.match(SQLiteParser.K_PLAN)

            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
            if la_ == 1:
                self.state = 275
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 276
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 277
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 278
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 279
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 280
                self.compound_select_stmt()
                pass

            elif la_ == 7:
                self.state = 281
                self.create_index_stmt()
                pass

            elif la_ == 8:
                self.state = 282
                self.create_table_stmt()
                pass

            elif la_ == 9:
                self.state = 283
                self.create_trigger_stmt()
                pass

            elif la_ == 10:
                self.state = 284
                self.create_view_stmt()
                pass

            elif la_ == 11:
                self.state = 285
                self.create_virtual_table_stmt()
                pass

            elif la_ == 12:
                self.state = 286
                self.delete_stmt()
                pass

            elif la_ == 13:
                self.state = 287
                self.delete_stmt_limited()
                pass

            elif la_ == 14:
                self.state = 288
                self.detach_stmt()
                pass

            elif la_ == 15:
                self.state = 289
                self.drop_index_stmt()
                pass

            elif la_ == 16:
                self.state = 290
                self.drop_table_stmt()
                pass

            elif la_ == 17:
                self.state = 291
                self.drop_trigger_stmt()
                pass

            elif la_ == 18:
                self.state = 292
                self.drop_view_stmt()
                pass

            elif la_ == 19:
                self.state = 293
                self.factored_select_stmt()
                pass

            elif la_ == 20:
                self.state = 294
                self.insert_stmt()
                pass

            elif la_ == 21:
                self.state = 295
                self.pragma_stmt()
                pass

            elif la_ == 22:
                self.state = 296
                self.reindex_stmt()
                pass

            elif la_ == 23:
                self.state = 297
                self.release_stmt()
                pass

            elif la_ == 24:
                self.state = 298
                self.rollback_stmt()
                pass

            elif la_ == 25:
                self.state = 299
                self.savepoint_stmt()
                pass

            elif la_ == 26:
                self.state = 300
                self.simple_select_stmt()
                pass

            elif la_ == 27:
                self.state = 301
                self.select_stmt()
                pass

            elif la_ == 28:
                self.state = 302
                self.update_stmt()
                pass

            elif la_ == 29:
                self.state = 303
                self.update_stmt_limited()
                pass

            elif la_ == 30:
                self.state = 304
                self.vacuum_stmt()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlter_table_stmt"):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlter_table_stmt"):
                listener.exitAlter_table_stmt(self)

    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(SQLiteParser.K_ALTER)
            self.state = 308
            self.match(SQLiteParser.K_TABLE)
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.state = 309
                self.database_name()
                self.state = 310
                self.match(SQLiteParser.DOT)

            self.state = 314
            self.table_name()
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_RENAME]:
                self.state = 315
                self.match(SQLiteParser.K_RENAME)
                self.state = 316
                self.match(SQLiteParser.K_TO)
                self.state = 317
                self.new_table_name()
                pass
            elif token in [SQLiteParser.K_ADD]:
                self.state = 318
                self.match(SQLiteParser.K_ADD)
                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
                if la_ == 1:
                    self.state = 319
                    self.match(SQLiteParser.K_COLUMN)

                self.state = 322
                self.column_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Analyze_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnalyze_stmt"):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnalyze_stmt"):
                listener.exitAnalyze_stmt(self)

    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(SQLiteParser.K_ANALYZE)
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.state = 326
                self.database_name()

            elif la_ == 2:
                self.state = 327
                self.table_or_index_name()

            elif la_ == 3:
                self.state = 328
                self.database_name()
                self.state = 329
                self.match(SQLiteParser.DOT)
                self.state = 330
                self.table_or_index_name()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attach_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttach_stmt"):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttach_stmt"):
                listener.exitAttach_stmt(self)

    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(SQLiteParser.K_ATTACH)
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.state = 335
                self.match(SQLiteParser.K_DATABASE)

            self.state = 338
            self.expr(0)
            self.state = 339
            self.match(SQLiteParser.K_AS)
            self.state = 340
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Begin_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBegin_stmt"):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBegin_stmt"):
                listener.exitBegin_stmt(self)

    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(SQLiteParser.K_BEGIN)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 58)) & ~0x3F) == 0 and (
                (1 << (_la - 58))
                & (
                    (1 << (SQLiteParser.K_DEFERRED - 58))
                    | (1 << (SQLiteParser.K_EXCLUSIVE - 58))
                    | (1 << (SQLiteParser.K_IMMEDIATE - 58))
                )
            ) != 0:
                self.state = 343
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 58)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 58))
                            & (
                                (1 << (SQLiteParser.K_DEFERRED - 58))
                                | (1 << (SQLiteParser.K_EXCLUSIVE - 58))
                                | (1 << (SQLiteParser.K_IMMEDIATE - 58))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TRANSACTION:
                self.state = 346
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                if la_ == 1:
                    self.state = 347
                    self.transaction_name()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCommit_stmt"):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCommit_stmt"):
                listener.exitCommit_stmt(self)

    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            _la = self._input.LA(1)
            if not (_la == SQLiteParser.K_COMMIT or _la == SQLiteParser.K_END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TRANSACTION:
                self.state = 353
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
                if la_ == 1:
                    self.state = 354
                    self.transaction_name()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_select_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext, i)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SQLiteParser.Common_table_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Common_table_expressionContext, i
                )

        def order_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Order_clauseContext, 0)

        def limit_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_clauseContext, 0)

        def K_UNION(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UNION)
            else:
                return self.getToken(SQLiteParser.K_UNION, i)

        def K_INTERSECT(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_INTERSECT)
            else:
                return self.getToken(SQLiteParser.K_INTERSECT, i)

        def K_EXCEPT(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_EXCEPT)
            else:
                return self.getToken(SQLiteParser.K_EXCEPT, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_ALL(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ALL)
            else:
                return self.getToken(SQLiteParser.K_ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompound_select_stmt"):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompound_select_stmt"):
                listener.exitCompound_select_stmt(self)

    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compound_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 359
                self.match(SQLiteParser.K_WITH)
                self.state = 361
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
                if la_ == 1:
                    self.state = 360
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 363
                self.common_table_expression()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 364
                    self.match(SQLiteParser.COMMA)
                    self.state = 365
                    self.common_table_expression()
                    self.state = 370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 373
            self.select_core()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 380
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_UNION]:
                    self.state = 374
                    self.match(SQLiteParser.K_UNION)
                    self.state = 376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_ALL:
                        self.state = 375
                        self.match(SQLiteParser.K_ALL)

                    pass
                elif token in [SQLiteParser.K_INTERSECT]:
                    self.state = 378
                    self.match(SQLiteParser.K_INTERSECT)
                    pass
                elif token in [SQLiteParser.K_EXCEPT]:
                    self.state = 379
                    self.match(SQLiteParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 382
                self.select_core()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    _la == SQLiteParser.K_EXCEPT
                    or _la == SQLiteParser.K_INTERSECT
                    or _la == SQLiteParser.K_UNION
                ):
                    break

            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 387
                self.order_clause()

            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 390
                self.limit_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_index_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def indexed_column(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext, i)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Where_clauseContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreate_index_stmt"):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreate_index_stmt"):
                listener.exitCreate_index_stmt(self)

    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_create_index_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(SQLiteParser.K_CREATE)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_UNIQUE:
                self.state = 394
                self.match(SQLiteParser.K_UNIQUE)

            self.state = 397
            self.match(SQLiteParser.K_INDEX)
            self.state = 401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
            if la_ == 1:
                self.state = 398
                self.match(SQLiteParser.K_IF)
                self.state = 399
                self.match(SQLiteParser.K_NOT)
                self.state = 400
                self.match(SQLiteParser.K_EXISTS)

            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.state = 403
                self.database_name()
                self.state = 404
                self.match(SQLiteParser.DOT)

            self.state = 408
            self.index_name()
            self.state = 409
            self.match(SQLiteParser.K_ON)
            self.state = 410
            self.table_name()
            self.state = 411
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 412
            self.indexed_column()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 413
                self.match(SQLiteParser.COMMA)
                self.state = 414
                self.indexed_column()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 421
                self.where_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_table_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def column_def(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext, i)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def table_constraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext, i)

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreate_table_stmt"):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreate_table_stmt"):
                listener.exitCreate_table_stmt(self)

    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_table_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(SQLiteParser.K_CREATE)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TEMP or _la == SQLiteParser.K_TEMPORARY:
                self.state = 425
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.K_TEMP or _la == SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 428
            self.match(SQLiteParser.K_TABLE)
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
            if la_ == 1:
                self.state = 429
                self.match(SQLiteParser.K_IF)
                self.state = 430
                self.match(SQLiteParser.K_NOT)
                self.state = 431
                self.match(SQLiteParser.K_EXISTS)

            self.state = 437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
            if la_ == 1:
                self.state = 434
                self.database_name()
                self.state = 435
                self.match(SQLiteParser.DOT)

            self.state = 439
            self.table_name()
            self.state = 463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 440
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 441
                self.column_def()
                self.state = 446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 35, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 442
                        self.match(SQLiteParser.COMMA)
                        self.state = 443
                        self.column_def()
                    self.state = 448
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 35, self._ctx)

                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 449
                    self.match(SQLiteParser.COMMA)
                    self.state = 450
                    self.table_constraint()
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 456
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_WITHOUT:
                    self.state = 457
                    self.match(SQLiteParser.K_WITHOUT)
                    self.state = 458
                    self.match(SQLiteParser.IDENTIFIER)

                pass
            elif token in [SQLiteParser.K_AS]:
                self.state = 461
                self.match(SQLiteParser.K_AS)
                self.state = 462
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_trigger_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Database_nameContext, i)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_OF(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_OF)
            else:
                return self.getToken(SQLiteParser.K_OF, i)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def update_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext, i)

        def insert_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext, i)

        def delete_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext, i)

        def select_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreate_trigger_stmt"):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreate_trigger_stmt"):
                listener.exitCreate_trigger_stmt(self)

    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_trigger_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(SQLiteParser.K_CREATE)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TEMP or _la == SQLiteParser.K_TEMPORARY:
                self.state = 466
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.K_TEMP or _la == SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 469
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 40, self._ctx)
            if la_ == 1:
                self.state = 470
                self.match(SQLiteParser.K_IF)
                self.state = 471
                self.match(SQLiteParser.K_NOT)
                self.state = 472
                self.match(SQLiteParser.K_EXISTS)

            self.state = 478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
            if la_ == 1:
                self.state = 475
                self.database_name()
                self.state = 476
                self.match(SQLiteParser.DOT)

            self.state = 480
            self.trigger_name()
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_BEFORE]:
                self.state = 481
                self.match(SQLiteParser.K_BEFORE)
                pass
            elif token in [SQLiteParser.K_AFTER]:
                self.state = 482
                self.match(SQLiteParser.K_AFTER)
                pass
            elif token in [SQLiteParser.K_INSTEAD]:
                self.state = 483
                self.match(SQLiteParser.K_INSTEAD)
                self.state = 484
                self.match(SQLiteParser.K_OF)
                pass
            elif token in [
                SQLiteParser.K_DELETE,
                SQLiteParser.K_INSERT,
                SQLiteParser.K_UPDATE,
            ]:
                pass
            else:
                pass
            self.state = 501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_DELETE]:
                self.state = 487
                self.match(SQLiteParser.K_DELETE)
                pass
            elif token in [SQLiteParser.K_INSERT]:
                self.state = 488
                self.match(SQLiteParser.K_INSERT)
                pass
            elif token in [SQLiteParser.K_UPDATE]:
                self.state = 489
                self.match(SQLiteParser.K_UPDATE)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_OF:
                    self.state = 490
                    self.match(SQLiteParser.K_OF)
                    self.state = 491
                    self.column_name()
                    self.state = 496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 492
                        self.match(SQLiteParser.COMMA)
                        self.state = 493
                        self.column_name()
                        self.state = 498
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 503
            self.match(SQLiteParser.K_ON)
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.state = 504
                self.database_name()
                self.state = 505
                self.match(SQLiteParser.DOT)

            self.state = 509
            self.table_name()
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_FOR:
                self.state = 510
                self.match(SQLiteParser.K_FOR)
                self.state = 511
                self.match(SQLiteParser.K_EACH)
                self.state = 512
                self.match(SQLiteParser.K_ROW)

            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHEN:
                self.state = 515
                self.match(SQLiteParser.K_WHEN)
                self.state = 516
                self.expr(0)

            self.state = 519
            self.match(SQLiteParser.K_BEGIN)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 49, self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 521
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 522
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 523
                    self.select_stmt()
                    pass

                self.state = 526
                self.match(SQLiteParser.SCOL)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    _la == SQLiteParser.K_DELETE
                    or (
                        (((_la - 88)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 88))
                            & (
                                (1 << (SQLiteParser.K_INSERT - 88))
                                | (1 << (SQLiteParser.K_REPLACE - 88))
                                | (1 << (SQLiteParser.K_SELECT - 88))
                                | (1 << (SQLiteParser.K_UPDATE - 88))
                                | (1 << (SQLiteParser.K_VALUES - 88))
                                | (1 << (SQLiteParser.K_WITH - 88))
                            )
                        )
                        != 0
                    )
                ):
                    break

            self.state = 532
            self.match(SQLiteParser.K_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_view_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreate_view_stmt"):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreate_view_stmt"):
                listener.exitCreate_view_stmt(self)

    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_view_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(SQLiteParser.K_CREATE)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TEMP or _la == SQLiteParser.K_TEMPORARY:
                self.state = 535
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.K_TEMP or _la == SQLiteParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 538
            self.match(SQLiteParser.K_VIEW)
            self.state = 542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 52, self._ctx)
            if la_ == 1:
                self.state = 539
                self.match(SQLiteParser.K_IF)
                self.state = 540
                self.match(SQLiteParser.K_NOT)
                self.state = 541
                self.match(SQLiteParser.K_EXISTS)

            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 544
                self.database_name()
                self.state = 545
                self.match(SQLiteParser.DOT)

            self.state = 549
            self.view_name()
            self.state = 550
            self.match(SQLiteParser.K_AS)
            self.state = 551
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_virtual_table_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def module_argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreate_virtual_table_stmt"):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreate_virtual_table_stmt"):
                listener.exitCreate_virtual_table_stmt(self)

    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 28, self.RULE_create_virtual_table_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(SQLiteParser.K_CREATE)
            self.state = 554
            self.match(SQLiteParser.K_VIRTUAL)
            self.state = 555
            self.match(SQLiteParser.K_TABLE)
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
            if la_ == 1:
                self.state = 556
                self.match(SQLiteParser.K_IF)
                self.state = 557
                self.match(SQLiteParser.K_NOT)
                self.state = 558
                self.match(SQLiteParser.K_EXISTS)

            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
            if la_ == 1:
                self.state = 561
                self.database_name()
                self.state = 562
                self.match(SQLiteParser.DOT)

            self.state = 566
            self.table_name()
            self.state = 567
            self.match(SQLiteParser.K_USING)
            self.state = 568
            self.module_name()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 569
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 570
                self.module_argument()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 571
                    self.match(SQLiteParser.COMMA)
                    self.state = 572
                    self.module_argument()
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 578
                self.match(SQLiteParser.CLOSE_PAR)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Where_clauseContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDelete_stmt"):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDelete_stmt"):
                listener.exitDelete_stmt(self)

    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delete_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 582
                self.with_clause()

            self.state = 585
            self.match(SQLiteParser.K_DELETE)
            self.state = 586
            self.match(SQLiteParser.K_FROM)
            self.state = 587
            self.qualified_table_name()
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 588
                self.where_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmt_limitedContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Where_clauseContext, 0)

        def limit_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_clauseContext, 0)

        def order_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Order_clauseContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDelete_stmt_limited"):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDelete_stmt_limited"):
                listener.exitDelete_stmt_limited(self)

    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_delete_stmt_limited)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 591
                self.with_clause()

            self.state = 594
            self.match(SQLiteParser.K_DELETE)
            self.state = 595
            self.match(SQLiteParser.K_FROM)
            self.state = 596
            self.qualified_table_name()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 597
                self.where_clause()

            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT or _la == SQLiteParser.K_ORDER:
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_ORDER:
                    self.state = 600
                    self.order_clause()

                self.state = 603
                self.limit_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Detach_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDetach_stmt"):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDetach_stmt"):
                listener.exitDetach_stmt(self)

    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(SQLiteParser.K_DETACH)
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
            if la_ == 1:
                self.state = 607
                self.match(SQLiteParser.K_DATABASE)

            self.state = 610
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_index_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_index_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDrop_index_stmt"):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDrop_index_stmt"):
                listener.exitDrop_index_stmt(self)

    def drop_index_stmt(self):

        localctx = SQLiteParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(SQLiteParser.K_DROP)
            self.state = 613
            self.match(SQLiteParser.K_INDEX)
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
            if la_ == 1:
                self.state = 614
                self.match(SQLiteParser.K_IF)
                self.state = 615
                self.match(SQLiteParser.K_EXISTS)

            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 66, self._ctx)
            if la_ == 1:
                self.state = 618
                self.database_name()
                self.state = 619
                self.match(SQLiteParser.DOT)

            self.state = 623
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_table_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_table_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDrop_table_stmt"):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDrop_table_stmt"):
                listener.exitDrop_table_stmt(self)

    def drop_table_stmt(self):

        localctx = SQLiteParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(SQLiteParser.K_DROP)
            self.state = 626
            self.match(SQLiteParser.K_TABLE)
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.state = 627
                self.match(SQLiteParser.K_IF)
                self.state = 628
                self.match(SQLiteParser.K_EXISTS)

            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
            if la_ == 1:
                self.state = 631
                self.database_name()
                self.state = 632
                self.match(SQLiteParser.DOT)

            self.state = 636
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_trigger_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_trigger_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDrop_trigger_stmt"):
                listener.enterDrop_trigger_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDrop_trigger_stmt"):
                listener.exitDrop_trigger_stmt(self)

    def drop_trigger_stmt(self):

        localctx = SQLiteParser.Drop_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_trigger_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(SQLiteParser.K_DROP)
            self.state = 639
            self.match(SQLiteParser.K_TRIGGER)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
            if la_ == 1:
                self.state = 640
                self.match(SQLiteParser.K_IF)
                self.state = 641
                self.match(SQLiteParser.K_EXISTS)

            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
            if la_ == 1:
                self.state = 644
                self.database_name()
                self.state = 645
                self.match(SQLiteParser.DOT)

            self.state = 649
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_view_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_view_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDrop_view_stmt"):
                listener.enterDrop_view_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDrop_view_stmt"):
                listener.exitDrop_view_stmt(self)

    def drop_view_stmt(self):

        localctx = SQLiteParser.Drop_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_view_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(SQLiteParser.K_DROP)
            self.state = 652
            self.match(SQLiteParser.K_VIEW)
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
            if la_ == 1:
                self.state = 653
                self.match(SQLiteParser.K_IF)
                self.state = 654
                self.match(SQLiteParser.K_EXISTS)

            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
            if la_ == 1:
                self.state = 657
                self.database_name()
                self.state = 658
                self.match(SQLiteParser.DOT)

            self.state = 662
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factored_select_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext, i)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SQLiteParser.Common_table_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Common_table_expressionContext, i
                )

        def compound_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Compound_operatorContext, i
                )

        def order_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Order_clauseContext, 0)

        def limit_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_clauseContext, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactored_select_stmt"):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactored_select_stmt"):
                listener.exitFactored_select_stmt(self)

    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factored_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 664
                self.match(SQLiteParser.K_WITH)
                self.state = 666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
                if la_ == 1:
                    self.state = 665
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 668
                self.common_table_expression()
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 669
                    self.match(SQLiteParser.COMMA)
                    self.state = 670
                    self.common_table_expression()
                    self.state = 675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 678
            self.select_core()
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                _la == SQLiteParser.K_EXCEPT
                or _la == SQLiteParser.K_INTERSECT
                or _la == SQLiteParser.K_UNION
            ):
                self.state = 679
                self.compound_operator()
                self.state = 680
                self.select_core()
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 687
                self.order_clause()

            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 690
                self.limit_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsert_stmt"):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsert_stmt"):
                listener.exitInsert_stmt(self)

    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_insert_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 693
                self.with_clause()

            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 80, self._ctx)
            if la_ == 1:
                self.state = 696
                self.match(SQLiteParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 697
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 698
                self.match(SQLiteParser.K_INSERT)
                self.state = 699
                self.match(SQLiteParser.K_OR)
                self.state = 700
                self.match(SQLiteParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 701
                self.match(SQLiteParser.K_INSERT)
                self.state = 702
                self.match(SQLiteParser.K_OR)
                self.state = 703
                self.match(SQLiteParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 704
                self.match(SQLiteParser.K_INSERT)
                self.state = 705
                self.match(SQLiteParser.K_OR)
                self.state = 706
                self.match(SQLiteParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 707
                self.match(SQLiteParser.K_INSERT)
                self.state = 708
                self.match(SQLiteParser.K_OR)
                self.state = 709
                self.match(SQLiteParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 710
                self.match(SQLiteParser.K_INSERT)
                self.state = 711
                self.match(SQLiteParser.K_OR)
                self.state = 712
                self.match(SQLiteParser.K_IGNORE)
                pass

            self.state = 715
            self.match(SQLiteParser.K_INTO)
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
            if la_ == 1:
                self.state = 716
                self.database_name()
                self.state = 717
                self.match(SQLiteParser.DOT)

            self.state = 721
            self.table_name()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 722
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 723
                self.column_name()
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 724
                    self.match(SQLiteParser.COMMA)
                    self.state = 725
                    self.column_name()
                    self.state = 730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 731
                self.match(SQLiteParser.CLOSE_PAR)

            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 87, self._ctx)
            if la_ == 1:
                self.state = 735
                self.match(SQLiteParser.K_VALUES)
                self.state = 736
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 737
                self.expr(0)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 738
                    self.match(SQLiteParser.COMMA)
                    self.state = 739
                    self.expr(0)
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 745
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 746
                    self.match(SQLiteParser.COMMA)
                    self.state = 747
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 748
                    self.expr(0)
                    self.state = 753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 749
                        self.match(SQLiteParser.COMMA)
                        self.state = 750
                        self.expr(0)
                        self.state = 755
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 756
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 763
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 764
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 765
                self.match(SQLiteParser.K_VALUES)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragma_stmt"):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragma_stmt"):
                listener.exitPragma_stmt(self)

    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(SQLiteParser.K_PRAGMA)
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
            if la_ == 1:
                self.state = 769
                self.database_name()
                self.state = 770
                self.match(SQLiteParser.DOT)

            self.state = 774
            self.pragma_name()
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 775
                self.match(SQLiteParser.ASSIGN)
                self.state = 776
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 777
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 778
                self.pragma_value()
                self.state = 779
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [
                SQLiteParser.EOF,
                SQLiteParser.SCOL,
                SQLiteParser.K_ALTER,
                SQLiteParser.K_ANALYZE,
                SQLiteParser.K_ATTACH,
                SQLiteParser.K_BEGIN,
                SQLiteParser.K_COMMIT,
                SQLiteParser.K_CREATE,
                SQLiteParser.K_DELETE,
                SQLiteParser.K_DETACH,
                SQLiteParser.K_DROP,
                SQLiteParser.K_END,
                SQLiteParser.K_EXPLAIN,
                SQLiteParser.K_INSERT,
                SQLiteParser.K_PRAGMA,
                SQLiteParser.K_REINDEX,
                SQLiteParser.K_RELEASE,
                SQLiteParser.K_REPLACE,
                SQLiteParser.K_ROLLBACK,
                SQLiteParser.K_SAVEPOINT,
                SQLiteParser.K_SELECT,
                SQLiteParser.K_UPDATE,
                SQLiteParser.K_VACUUM,
                SQLiteParser.K_VALUES,
                SQLiteParser.K_WITH,
                SQLiteParser.UNEXPECTED_CHAR,
            ]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reindex_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReindex_stmt"):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReindex_stmt"):
                listener.exitReindex_stmt(self)

    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(SQLiteParser.K_REINDEX)
            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
            if la_ == 1:
                self.state = 784
                self.collation_name()

            elif la_ == 2:
                self.state = 788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 90, self._ctx)
                if la_ == 1:
                    self.state = 785
                    self.database_name()
                    self.state = 786
                    self.match(SQLiteParser.DOT)

                self.state = 792
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
                if la_ == 1:
                    self.state = 790
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 791
                    self.index_name()
                    pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Release_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelease_stmt"):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelease_stmt"):
                listener.exitRelease_stmt(self)

    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(SQLiteParser.K_RELEASE)
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
            if la_ == 1:
                self.state = 797
                self.match(SQLiteParser.K_SAVEPOINT)

            self.state = 800
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRollback_stmt"):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRollback_stmt"):
                listener.exitRollback_stmt(self)

    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rollback_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(SQLiteParser.K_ROLLBACK)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TRANSACTION:
                self.state = 803
                self.match(SQLiteParser.K_TRANSACTION)
                self.state = 805
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
                if la_ == 1:
                    self.state = 804
                    self.transaction_name()

            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_TO:
                self.state = 809
                self.match(SQLiteParser.K_TO)
                self.state = 811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                if la_ == 1:
                    self.state = 810
                    self.match(SQLiteParser.K_SAVEPOINT)

                self.state = 813
                self.savepoint_name()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSavepoint_stmt"):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSavepoint_stmt"):
                listener.exitSavepoint_stmt(self)

    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(SQLiteParser.K_SAVEPOINT)
            self.state = 817
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_select_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SQLiteParser.Common_table_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Common_table_expressionContext, i
                )

        def order_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Order_clauseContext, 0)

        def limit_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_clauseContext, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimple_select_stmt"):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimple_select_stmt"):
                listener.exitSimple_select_stmt(self)

    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_simple_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 819
                self.match(SQLiteParser.K_WITH)
                self.state = 821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
                if la_ == 1:
                    self.state = 820
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 823
                self.common_table_expression()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 824
                    self.match(SQLiteParser.COMMA)
                    self.state = 825
                    self.common_table_expression()
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 833
            self.select_core()
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 834
                self.order_clause()

            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 837
                self.limit_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_or_valuesContext, i)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def common_table_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SQLiteParser.Common_table_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Common_table_expressionContext, i
                )

        def compound_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Compound_operatorContext, i
                )

        def order_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Order_clauseContext, 0)

        def limit_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_clauseContext, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelect_stmt"):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelect_stmt"):
                listener.exitSelect_stmt(self)

    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_select_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 840
                self.match(SQLiteParser.K_WITH)
                self.state = 842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                if la_ == 1:
                    self.state = 841
                    self.match(SQLiteParser.K_RECURSIVE)

                self.state = 844
                self.common_table_expression()
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 845
                    self.match(SQLiteParser.COMMA)
                    self.state = 846
                    self.common_table_expression()
                    self.state = 851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 854
            self.select_or_values()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                _la == SQLiteParser.K_EXCEPT
                or _la == SQLiteParser.K_INTERSECT
                or _la == SQLiteParser.K_UNION
            ):
                self.state = 855
                self.compound_operator()
                self.state = 856
                self.select_or_values()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ORDER:
                self.state = 863
                self.order_clause()

            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT:
                self.state = 866
                self.limit_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_valuesContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Select_clauseContext, 0)

        def from_clause(self):
            return self.getTypedRuleContext(SQLiteParser.From_clauseContext, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Where_clauseContext, 0)

        def group_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Group_clauseContext, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_or_values

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelect_or_values"):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelect_or_values"):
                listener.exitSelect_or_values(self)

    def select_or_values(self):

        localctx = SQLiteParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_select_or_values)
        self._la = 0  # Token type
        try:
            self.state = 907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.select_clause()
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_FROM:
                    self.state = 870
                    self.from_clause()

                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_WHERE:
                    self.state = 873
                    self.where_clause()

                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_GROUP:
                    self.state = 876
                    self.group_clause()

                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.match(SQLiteParser.K_VALUES)
                self.state = 880
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 881
                self.expr(0)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 882
                    self.match(SQLiteParser.COMMA)
                    self.state = 883
                    self.expr(0)
                    self.state = 888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 889
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 890
                    self.match(SQLiteParser.COMMA)
                    self.state = 891
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 892
                    self.expr(0)
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 893
                        self.match(SQLiteParser.COMMA)
                        self.state = 894
                        self.expr(0)
                        self.state = 899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 900
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Where_clauseContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUpdate_stmt"):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUpdate_stmt"):
                listener.exitUpdate_stmt(self)

    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_update_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 909
                self.with_clause()

            self.state = 912
            self.match(SQLiteParser.K_UPDATE)
            self.state = 923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
            if la_ == 1:
                self.state = 913
                self.match(SQLiteParser.K_OR)
                self.state = 914
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 915
                self.match(SQLiteParser.K_OR)
                self.state = 916
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 917
                self.match(SQLiteParser.K_OR)
                self.state = 918
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 919
                self.match(SQLiteParser.K_OR)
                self.state = 920
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 921
                self.match(SQLiteParser.K_OR)
                self.state = 922
                self.match(SQLiteParser.K_IGNORE)

            self.state = 925
            self.qualified_table_name()
            self.state = 926
            self.match(SQLiteParser.K_SET)
            self.state = 927
            self.column_name()
            self.state = 928
            self.match(SQLiteParser.ASSIGN)
            self.state = 929
            self.expr(0)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 930
                self.match(SQLiteParser.COMMA)
                self.state = 931
                self.column_name()
                self.state = 932
                self.match(SQLiteParser.ASSIGN)
                self.state = 933
                self.expr(0)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 940
                self.where_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmt_limitedContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Where_clauseContext, 0)

        def limit_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_clauseContext, 0)

        def order_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Order_clauseContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUpdate_stmt_limited"):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUpdate_stmt_limited"):
                listener.exitUpdate_stmt_limited(self)

    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_update_stmt_limited)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WITH:
                self.state = 943
                self.with_clause()

            self.state = 946
            self.match(SQLiteParser.K_UPDATE)
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                self.state = 947
                self.match(SQLiteParser.K_OR)
                self.state = 948
                self.match(SQLiteParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 949
                self.match(SQLiteParser.K_OR)
                self.state = 950
                self.match(SQLiteParser.K_ABORT)

            elif la_ == 3:
                self.state = 951
                self.match(SQLiteParser.K_OR)
                self.state = 952
                self.match(SQLiteParser.K_REPLACE)

            elif la_ == 4:
                self.state = 953
                self.match(SQLiteParser.K_OR)
                self.state = 954
                self.match(SQLiteParser.K_FAIL)

            elif la_ == 5:
                self.state = 955
                self.match(SQLiteParser.K_OR)
                self.state = 956
                self.match(SQLiteParser.K_IGNORE)

            self.state = 959
            self.qualified_table_name()
            self.state = 960
            self.match(SQLiteParser.K_SET)
            self.state = 961
            self.column_name()
            self.state = 962
            self.match(SQLiteParser.ASSIGN)
            self.state = 963
            self.expr(0)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 964
                self.match(SQLiteParser.COMMA)
                self.state = 965
                self.column_name()
                self.state = 966
                self.match(SQLiteParser.ASSIGN)
                self.state = 967
                self.expr(0)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_WHERE:
                self.state = 974
                self.where_clause()

            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_LIMIT or _la == SQLiteParser.K_ORDER:
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_ORDER:
                    self.state = 977
                    self.order_clause()

                self.state = 980
                self.limit_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vacuum_stmtContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVacuum_stmt"):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVacuum_stmt"):
                listener.exitVacuum_stmt(self)

    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(SQLiteParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_defContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext, 0)

        def column_constraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Column_constraintContext, i
                )

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumn_def"):
                listener.enterColumn_def(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumn_def"):
                listener.exitColumn_def(self)

    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_column_def)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.column_name()
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
            if la_ == 1:
                self.state = 986
                self.type_name()

            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SQLiteParser.K_CHECK)
                        | (1 << SQLiteParser.K_COLLATE)
                        | (1 << SQLiteParser.K_CONSTRAINT)
                        | (1 << SQLiteParser.K_DEFAULT)
                    )
                )
                != 0
            ) or (
                (((_la - 102)) & ~0x3F) == 0
                and (
                    (1 << (_la - 102))
                    & (
                        (1 << (SQLiteParser.K_NOT - 102))
                        | (1 << (SQLiteParser.K_NULL - 102))
                        | (1 << (SQLiteParser.K_PRIMARY - 102))
                        | (1 << (SQLiteParser.K_REFERENCES - 102))
                        | (1 << (SQLiteParser.K_UNIQUE - 102))
                    )
                )
                != 0
            ):
                self.state = 989
                self.column_constraint()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext, i)

        def signed_number(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType_name"):
                listener.enterType_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType_name"):
                listener.exitType_name(self)

    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 995
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 998
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 128, self._ctx)

            self.state = 1010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 129, self._ctx)
            if la_ == 1:
                self.state = 1000
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1001
                self.signed_number()
                self.state = 1002
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 1004
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1005
                self.signed_number()
                self.state = 1006
                self.match(SQLiteParser.COMMA)
                self.state = 1007
                self.signed_number()
                self.state = 1008
                self.match(SQLiteParser.CLOSE_PAR)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext, 0)

        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext, 0)

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext, 0)

        def k_asc(self):
            return self.getTypedRuleContext(SQLiteParser.K_ascContext, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumn_constraint"):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumn_constraint"):
                listener.exitColumn_constraint(self)

    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_column_constraint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_CONSTRAINT:
                self.state = 1012
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1013
                self.name()

            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY]:
                self.state = 1016
                self.match(SQLiteParser.K_PRIMARY)
                self.state = 1017
                self.match(SQLiteParser.K_KEY)
                self.state = 1020
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_ASC]:
                    self.state = 1018
                    self.k_asc()
                    pass
                elif token in [SQLiteParser.K_DESC]:
                    self.state = 1019
                    self.match(SQLiteParser.K_DESC)
                    pass
                elif token in [
                    SQLiteParser.EOF,
                    SQLiteParser.SCOL,
                    SQLiteParser.CLOSE_PAR,
                    SQLiteParser.COMMA,
                    SQLiteParser.K_ALTER,
                    SQLiteParser.K_ANALYZE,
                    SQLiteParser.K_ATTACH,
                    SQLiteParser.K_AUTOINCREMENT,
                    SQLiteParser.K_BEGIN,
                    SQLiteParser.K_CHECK,
                    SQLiteParser.K_COLLATE,
                    SQLiteParser.K_COMMIT,
                    SQLiteParser.K_CONSTRAINT,
                    SQLiteParser.K_CREATE,
                    SQLiteParser.K_DEFAULT,
                    SQLiteParser.K_DELETE,
                    SQLiteParser.K_DETACH,
                    SQLiteParser.K_DROP,
                    SQLiteParser.K_END,
                    SQLiteParser.K_EXPLAIN,
                    SQLiteParser.K_INSERT,
                    SQLiteParser.K_NOT,
                    SQLiteParser.K_NULL,
                    SQLiteParser.K_ON,
                    SQLiteParser.K_PRAGMA,
                    SQLiteParser.K_PRIMARY,
                    SQLiteParser.K_REFERENCES,
                    SQLiteParser.K_REINDEX,
                    SQLiteParser.K_RELEASE,
                    SQLiteParser.K_REPLACE,
                    SQLiteParser.K_ROLLBACK,
                    SQLiteParser.K_SAVEPOINT,
                    SQLiteParser.K_SELECT,
                    SQLiteParser.K_UNIQUE,
                    SQLiteParser.K_UPDATE,
                    SQLiteParser.K_VACUUM,
                    SQLiteParser.K_VALUES,
                    SQLiteParser.K_WITH,
                    SQLiteParser.UNEXPECTED_CHAR,
                ]:
                    pass
                else:
                    pass
                self.state = 1022
                self.conflict_clause()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_AUTOINCREMENT:
                    self.state = 1023
                    self.match(SQLiteParser.K_AUTOINCREMENT)

                pass
            elif token in [SQLiteParser.K_NOT, SQLiteParser.K_NULL]:
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_NOT:
                    self.state = 1026
                    self.match(SQLiteParser.K_NOT)

                self.state = 1029
                self.match(SQLiteParser.K_NULL)
                self.state = 1030
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_UNIQUE]:
                self.state = 1031
                self.match(SQLiteParser.K_UNIQUE)
                self.state = 1032
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1033
                self.match(SQLiteParser.K_CHECK)
                self.state = 1034
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1035
                self.expr(0)
                self.state = 1036
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.K_DEFAULT]:
                self.state = 1038
                self.match(SQLiteParser.K_DEFAULT)
                self.state = 1045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
                if la_ == 1:
                    self.state = 1039
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 1040
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 1041
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1042
                    self.expr(0)
                    self.state = 1043
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass

                pass
            elif token in [SQLiteParser.K_COLLATE]:
                self.state = 1047
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1048
                self.collation_name()
                pass
            elif token in [SQLiteParser.K_REFERENCES]:
                self.state = 1049
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conflict_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConflict_clause"):
                listener.enterConflict_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConflict_clause"):
                listener.exitConflict_clause(self)

    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conflict_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ON:
                self.state = 1052
                self.match(SQLiteParser.K_ON)
                self.state = 1053
                self.match(SQLiteParser.K_CONFLICT)
                self.state = 1054
                _la = self._input.LA(1)
                if not (
                    _la == SQLiteParser.K_ABORT
                    or (
                        (((_la - 72)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 72))
                            & (
                                (1 << (SQLiteParser.K_FAIL - 72))
                                | (1 << (SQLiteParser.K_IGNORE - 72))
                                | (1 << (SQLiteParser.K_REPLACE - 72))
                                | (1 << (SQLiteParser.K_ROLLBACK - 72))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext, 0)

        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext, 0)

        def k_distinct(self):
            return self.getTypedRuleContext(SQLiteParser.K_distinctContext, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def k_exists(self):
            return self.getTypedRuleContext(SQLiteParser.K_existsContext, 0)

        def k_not(self):
            return self.getTypedRuleContext(SQLiteParser.K_notContext, 0)

        def case_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Case_clauseContext, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext, 0)

        def binary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Binary_operatorContext, 0)

        def k_is(self):
            return self.getTypedRuleContext(SQLiteParser.K_isContext, 0)

        def k_in(self):
            return self.getTypedRuleContext(SQLiteParser.K_inContext, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def k_and(self):
            return self.getTypedRuleContext(SQLiteParser.K_andContext, 0)

        def k_or(self):
            return self.getTypedRuleContext(SQLiteParser.K_orContext, 0)

        def k_between(self):
            return self.getTypedRuleContext(SQLiteParser.K_betweenContext, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def like_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Like_clauseContext, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def k_null(self):
            return self.getTypedRuleContext(SQLiteParser.K_nullContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)

    def expr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_expr, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 144, self._ctx)
            if la_ == 1:
                self.state = 1058
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 1059
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 1068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
                if la_ == 1:
                    self.state = 1063
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
                    if la_ == 1:
                        self.state = 1060
                        self.database_name()
                        self.state = 1061
                        self.match(SQLiteParser.DOT)

                    self.state = 1065
                    self.table_name()
                    self.state = 1066
                    self.match(SQLiteParser.DOT)

                self.state = 1070
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 1071
                self.unary_operator()
                self.state = 1072
                self.expr(19)
                pass

            elif la_ == 5:
                self.state = 1074
                self.function_name()
                self.state = 1075
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1088
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    SQLiteParser.OPEN_PAR,
                    SQLiteParser.PLUS,
                    SQLiteParser.MINUS,
                    SQLiteParser.TILDE,
                    SQLiteParser.K_ABORT,
                    SQLiteParser.K_ACTION,
                    SQLiteParser.K_ADD,
                    SQLiteParser.K_AFTER,
                    SQLiteParser.K_ALL,
                    SQLiteParser.K_ALTER,
                    SQLiteParser.K_ANALYZE,
                    SQLiteParser.K_AND,
                    SQLiteParser.K_AS,
                    SQLiteParser.K_ASC,
                    SQLiteParser.K_ATTACH,
                    SQLiteParser.K_AUTOINCREMENT,
                    SQLiteParser.K_BEFORE,
                    SQLiteParser.K_BEGIN,
                    SQLiteParser.K_BETWEEN,
                    SQLiteParser.K_BY,
                    SQLiteParser.K_CASCADE,
                    SQLiteParser.K_CASE,
                    SQLiteParser.K_CAST,
                    SQLiteParser.K_CHECK,
                    SQLiteParser.K_COLLATE,
                    SQLiteParser.K_COLUMN,
                    SQLiteParser.K_COMMIT,
                    SQLiteParser.K_CONFLICT,
                    SQLiteParser.K_CONSTRAINT,
                    SQLiteParser.K_CREATE,
                    SQLiteParser.K_CROSS,
                    SQLiteParser.K_CURRENT_DATE,
                    SQLiteParser.K_CURRENT_TIME,
                    SQLiteParser.K_CURRENT_TIMESTAMP,
                    SQLiteParser.K_DATABASE,
                    SQLiteParser.K_DEFAULT,
                    SQLiteParser.K_DEFERRABLE,
                    SQLiteParser.K_DEFERRED,
                    SQLiteParser.K_DELETE,
                    SQLiteParser.K_DESC,
                    SQLiteParser.K_DETACH,
                    SQLiteParser.K_DISTINCT,
                    SQLiteParser.K_DROP,
                    SQLiteParser.K_EACH,
                    SQLiteParser.K_ELSE,
                    SQLiteParser.K_END,
                    SQLiteParser.K_ESCAPE,
                    SQLiteParser.K_EXCEPT,
                    SQLiteParser.K_EXCLUSIVE,
                    SQLiteParser.K_EXISTS,
                    SQLiteParser.K_EXPLAIN,
                    SQLiteParser.K_FAIL,
                    SQLiteParser.K_FOR,
                    SQLiteParser.K_FOREIGN,
                    SQLiteParser.K_FROM,
                    SQLiteParser.K_FULL,
                    SQLiteParser.K_GLOB,
                    SQLiteParser.K_GROUP,
                    SQLiteParser.K_HAVING,
                    SQLiteParser.K_IF,
                    SQLiteParser.K_IGNORE,
                    SQLiteParser.K_IMMEDIATE,
                    SQLiteParser.K_IN,
                    SQLiteParser.K_INDEX,
                    SQLiteParser.K_INDEXED,
                    SQLiteParser.K_INITIALLY,
                    SQLiteParser.K_INNER,
                    SQLiteParser.K_INSERT,
                    SQLiteParser.K_INSTEAD,
                    SQLiteParser.K_INTERSECT,
                    SQLiteParser.K_INTO,
                    SQLiteParser.K_IS,
                    SQLiteParser.K_ISNULL,
                    SQLiteParser.K_JOIN,
                    SQLiteParser.K_KEY,
                    SQLiteParser.K_LEFT,
                    SQLiteParser.K_LIKE,
                    SQLiteParser.K_LIMIT,
                    SQLiteParser.K_MATCH,
                    SQLiteParser.K_NATURAL,
                    SQLiteParser.K_NO,
                    SQLiteParser.K_NOT,
                    SQLiteParser.K_NOTNULL,
                    SQLiteParser.K_NULL,
                    SQLiteParser.K_OF,
                    SQLiteParser.K_OFFSET,
                    SQLiteParser.K_ON,
                    SQLiteParser.K_OR,
                    SQLiteParser.K_ORDER,
                    SQLiteParser.K_OUTER,
                    SQLiteParser.K_PLAN,
                    SQLiteParser.K_PRAGMA,
                    SQLiteParser.K_PRIMARY,
                    SQLiteParser.K_QUERY,
                    SQLiteParser.K_RAISE,
                    SQLiteParser.K_RECURSIVE,
                    SQLiteParser.K_REFERENCES,
                    SQLiteParser.K_REGEXP,
                    SQLiteParser.K_REINDEX,
                    SQLiteParser.K_RELEASE,
                    SQLiteParser.K_RENAME,
                    SQLiteParser.K_REPLACE,
                    SQLiteParser.K_RESTRICT,
                    SQLiteParser.K_RIGHT,
                    SQLiteParser.K_ROLLBACK,
                    SQLiteParser.K_ROW,
                    SQLiteParser.K_SAVEPOINT,
                    SQLiteParser.K_SELECT,
                    SQLiteParser.K_SET,
                    SQLiteParser.K_TABLE,
                    SQLiteParser.K_TEMP,
                    SQLiteParser.K_TEMPORARY,
                    SQLiteParser.K_THEN,
                    SQLiteParser.K_TO,
                    SQLiteParser.K_TRANSACTION,
                    SQLiteParser.K_TRIGGER,
                    SQLiteParser.K_UNION,
                    SQLiteParser.K_UNIQUE,
                    SQLiteParser.K_UPDATE,
                    SQLiteParser.K_USING,
                    SQLiteParser.K_VACUUM,
                    SQLiteParser.K_VALUES,
                    SQLiteParser.K_VIEW,
                    SQLiteParser.K_VIRTUAL,
                    SQLiteParser.K_WHEN,
                    SQLiteParser.K_WHERE,
                    SQLiteParser.K_WITH,
                    SQLiteParser.K_WITHOUT,
                    SQLiteParser.IDENTIFIER,
                    SQLiteParser.NUMERIC_LITERAL,
                    SQLiteParser.BIND_PARAMETER,
                    SQLiteParser.STRING_LITERAL,
                    SQLiteParser.BLOB_LITERAL,
                ]:
                    self.state = 1077
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
                    if la_ == 1:
                        self.state = 1076
                        self.k_distinct()

                    self.state = 1079
                    self.expr(0)
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 1080
                        self.match(SQLiteParser.COMMA)
                        self.state = 1081
                        self.expr(0)
                        self.state = 1086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 1087
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 1090
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 1092
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1093
                self.expr(0)
                self.state = 1094
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 1096
                self.match(SQLiteParser.K_CAST)
                self.state = 1097
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1098
                self.expr(0)
                self.state = 1099
                self.match(SQLiteParser.K_AS)
                self.state = 1100
                self.type_name()
                self.state = 1101
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_EXISTS or _la == SQLiteParser.K_NOT:
                    self.state = 1104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_NOT:
                        self.state = 1103
                        self.k_not()

                    self.state = 1106
                    self.k_exists()

                self.state = 1109
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1110
                self.select_stmt()
                self.state = 1111
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 1113
                self.case_clause()
                pass

            elif la_ == 10:
                self.state = 1114
                self.raise_function()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 159, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1215
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 158, self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1117
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 18)"
                            )
                        self.state = 1118
                        self.binary_operator()
                        self.state = 1119
                        self.expr(19)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1121
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 17)"
                            )
                        self.state = 1130
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 145, self._ctx)
                        if la_ == 1:
                            self.state = 1122
                            self.k_is()
                            pass

                        elif la_ == 2:
                            self.state = 1123
                            self.k_is()
                            self.state = 1124
                            self.k_not()
                            pass

                        elif la_ == 3:
                            self.state = 1126
                            self.k_in()
                            pass

                        elif la_ == 4:
                            self.state = 1127
                            self.match(SQLiteParser.K_GLOB)
                            pass

                        elif la_ == 5:
                            self.state = 1128
                            self.match(SQLiteParser.K_MATCH)
                            pass

                        elif la_ == 6:
                            self.state = 1129
                            self.match(SQLiteParser.K_REGEXP)
                            pass

                        self.state = 1132
                        self.expr(18)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1133
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 15)"
                            )
                        self.state = 1134
                        self.k_and()
                        self.state = 1135
                        self.expr(16)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1137
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 14)"
                            )
                        self.state = 1138
                        self.k_or()
                        self.state = 1139
                        self.expr(15)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1141
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 1142
                        self.k_is()
                        self.state = 1144
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 146, self._ctx)
                        if la_ == 1:
                            self.state = 1143
                            self.k_not()

                        self.state = 1146
                        self.expr(7)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1148
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 1150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SQLiteParser.K_NOT:
                            self.state = 1149
                            self.match(SQLiteParser.K_NOT)

                        self.state = 1152
                        self.k_between()
                        self.state = 1153
                        self.expr(0)
                        self.state = 1154
                        self.k_and()
                        self.state = 1155
                        self.expr(6)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1157
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 16)"
                            )
                        self.state = 1158
                        self.like_clause()
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1159
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 10)"
                            )
                        self.state = 1160
                        self.match(SQLiteParser.K_COLLATE)
                        self.state = 1161
                        self.collation_name()
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1162
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 9)"
                            )
                        self.state = 1164
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SQLiteParser.K_NOT:
                            self.state = 1163
                            self.match(SQLiteParser.K_NOT)

                        self.state = 1166
                        self.like_clause()
                        self.state = 1169
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 149, self._ctx)
                        if la_ == 1:
                            self.state = 1167
                            self.match(SQLiteParser.K_ESCAPE)
                            self.state = 1168
                            self.expr(0)

                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1171
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 8)"
                            )
                        self.state = 1173
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SQLiteParser.K_NOT:
                            self.state = 1172
                            self.match(SQLiteParser.K_NOT)

                        self.state = 1175
                        _la = self._input.LA(1)
                        if not (
                            (
                                (((_la - 77)) & ~0x3F) == 0
                                and (
                                    (1 << (_la - 77))
                                    & (
                                        (1 << (SQLiteParser.K_GLOB - 77))
                                        | (1 << (SQLiteParser.K_LIKE - 77))
                                        | (1 << (SQLiteParser.K_MATCH - 77))
                                        | (1 << (SQLiteParser.K_REGEXP - 77))
                                    )
                                )
                                != 0
                            )
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1176
                        self.expr(0)
                        self.state = 1179
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
                        if la_ == 1:
                            self.state = 1177
                            self.match(SQLiteParser.K_ESCAPE)
                            self.state = 1178
                            self.expr(0)

                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1181
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 7)"
                            )
                        self.state = 1187
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.K_ISNULL]:
                            self.state = 1182
                            self.match(SQLiteParser.K_ISNULL)
                            pass
                        elif token in [SQLiteParser.K_NOTNULL]:
                            self.state = 1183
                            self.match(SQLiteParser.K_NOTNULL)
                            pass
                        elif token in [SQLiteParser.K_NOT]:
                            self.state = 1184
                            self.k_not()
                            self.state = 1185
                            self.k_null()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expr
                        )
                        self.state = 1189
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 1191
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == SQLiteParser.K_NOT:
                            self.state = 1190
                            self.match(SQLiteParser.K_NOT)

                        self.state = 1193
                        self.k_in()
                        self.state = 1213
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 157, self._ctx)
                        if la_ == 1:
                            self.state = 1194
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1204
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(
                                self._input, 155, self._ctx
                            )
                            if la_ == 1:
                                self.state = 1195
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1196
                                self.expr(0)
                                self.state = 1201
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == SQLiteParser.COMMA:
                                    self.state = 1197
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1198
                                    self.expr(0)
                                    self.state = 1203
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 1206
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1210
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(
                                self._input, 156, self._ctx
                            )
                            if la_ == 1:
                                self.state = 1207
                                self.database_name()
                                self.state = 1208
                                self.match(SQLiteParser.DOT)

                            self.state = 1212
                            self.table_name()
                            pass

                        pass

                self.state = 1219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 159, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Foreign_key_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_ON(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ON)
            else:
                return self.getToken(SQLiteParser.K_ON, i)

        def K_MATCH(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_MATCH)
            else:
                return self.getToken(SQLiteParser.K_MATCH, i)

        def name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext, i)

        def K_DELETE(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DELETE)
            else:
                return self.getToken(SQLiteParser.K_DELETE, i)

        def K_UPDATE(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_UPDATE)
            else:
                return self.getToken(SQLiteParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_SET(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_SET)
            else:
                return self.getToken(SQLiteParser.K_SET, i)

        def K_NULL(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NULL)
            else:
                return self.getToken(SQLiteParser.K_NULL, i)

        def K_DEFAULT(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_DEFAULT)
            else:
                return self.getToken(SQLiteParser.K_DEFAULT, i)

        def K_CASCADE(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_CASCADE)
            else:
                return self.getToken(SQLiteParser.K_CASCADE, i)

        def K_RESTRICT(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_RESTRICT)
            else:
                return self.getToken(SQLiteParser.K_RESTRICT, i)

        def K_NO(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_NO)
            else:
                return self.getToken(SQLiteParser.K_NO, i)

        def K_ACTION(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_ACTION)
            else:
                return self.getToken(SQLiteParser.K_ACTION, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForeign_key_clause"):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForeign_key_clause"):
                listener.exitForeign_key_clause(self)

    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_foreign_key_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(SQLiteParser.K_REFERENCES)
            self.state = 1221
            self.foreign_table()
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 1222
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1223
                self.column_name()
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1224
                    self.match(SQLiteParser.COMMA)
                    self.state = 1225
                    self.column_name()
                    self.state = 1230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1231
                self.match(SQLiteParser.CLOSE_PAR)

            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.K_MATCH or _la == SQLiteParser.K_ON:
                self.state = 1249
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_ON]:
                    self.state = 1235
                    self.match(SQLiteParser.K_ON)
                    self.state = 1236
                    _la = self._input.LA(1)
                    if not (
                        _la == SQLiteParser.K_DELETE or _la == SQLiteParser.K_UPDATE
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1245
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
                    if la_ == 1:
                        self.state = 1237
                        self.match(SQLiteParser.K_SET)
                        self.state = 1238
                        self.match(SQLiteParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 1239
                        self.match(SQLiteParser.K_SET)
                        self.state = 1240
                        self.match(SQLiteParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 1241
                        self.match(SQLiteParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 1242
                        self.match(SQLiteParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 1243
                        self.match(SQLiteParser.K_NO)
                        self.state = 1244
                        self.match(SQLiteParser.K_ACTION)
                        pass

                    pass
                elif token in [SQLiteParser.K_MATCH]:
                    self.state = 1247
                    self.match(SQLiteParser.K_MATCH)
                    self.state = 1248
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
            if la_ == 1:
                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_NOT:
                    self.state = 1256
                    self.match(SQLiteParser.K_NOT)

                self.state = 1259
                self.match(SQLiteParser.K_DEFERRABLE)
                self.state = 1264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
                if la_ == 1:
                    self.state = 1260
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1261
                    self.match(SQLiteParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 1262
                    self.match(SQLiteParser.K_INITIALLY)
                    self.state = 1263
                    self.match(SQLiteParser.K_IMMEDIATE)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_functionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRaise_function"):
                listener.enterRaise_function(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRaise_function"):
                listener.exitRaise_function(self)

    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_raise_function)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(SQLiteParser.K_RAISE)
            self.state = 1269
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_IGNORE]:
                self.state = 1270
                self.match(SQLiteParser.K_IGNORE)
                pass
            elif token in [
                SQLiteParser.K_ABORT,
                SQLiteParser.K_FAIL,
                SQLiteParser.K_ROLLBACK,
            ]:
                self.state = 1271
                _la = self._input.LA(1)
                if not (
                    _la == SQLiteParser.K_ABORT
                    or _la == SQLiteParser.K_FAIL
                    or _la == SQLiteParser.K_ROLLBACK
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1272
                self.match(SQLiteParser.COMMA)
                self.state = 1273
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1276
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexed_columnContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext, 0)

        def k_asc(self):
            return self.getTypedRuleContext(SQLiteParser.K_ascContext, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndexed_column"):
                listener.enterIndexed_column(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndexed_column"):
                listener.exitIndexed_column(self)

    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_indexed_column)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.column_name()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_COLLATE:
                self.state = 1279
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1280
                self.collation_name()

            self.state = 1285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_ASC]:
                self.state = 1283
                self.k_asc()
                pass
            elif token in [SQLiteParser.K_DESC]:
                self.state = 1284
                self.match(SQLiteParser.K_DESC)
                pass
            elif token in [SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexed_column(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_constraint"):
                listener.enterTable_constraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_constraint"):
                listener.exitTable_constraint(self)

    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_table_constraint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_CONSTRAINT:
                self.state = 1287
                self.match(SQLiteParser.K_CONSTRAINT)
                self.state = 1288
                self.name()

            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_PRIMARY, SQLiteParser.K_UNIQUE]:
                self.state = 1294
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_PRIMARY]:
                    self.state = 1291
                    self.match(SQLiteParser.K_PRIMARY)
                    self.state = 1292
                    self.match(SQLiteParser.K_KEY)
                    pass
                elif token in [SQLiteParser.K_UNIQUE]:
                    self.state = 1293
                    self.match(SQLiteParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1296
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1297
                self.indexed_column()
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1298
                    self.match(SQLiteParser.COMMA)
                    self.state = 1299
                    self.indexed_column()
                    self.state = 1304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1305
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1306
                self.conflict_clause()
                pass
            elif token in [SQLiteParser.K_CHECK]:
                self.state = 1308
                self.match(SQLiteParser.K_CHECK)
                self.state = 1309
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1310
                self.expr(0)
                self.state = 1311
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.K_FOREIGN]:
                self.state = 1313
                self.match(SQLiteParser.K_FOREIGN)
                self.state = 1314
                self.match(SQLiteParser.K_KEY)
                self.state = 1315
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1316
                self.column_name()
                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1317
                    self.match(SQLiteParser.COMMA)
                    self.state = 1318
                    self.column_name()
                    self.state = 1323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1324
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1325
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def cte_table_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext, i)

        def K_AS(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_AS)
            else:
                return self.getToken(SQLiteParser.K_AS, i)

        def select_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, i)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWith_clause"):
                listener.enterWith_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWith_clause"):
                listener.exitWith_clause(self)

    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(SQLiteParser.K_WITH)
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.state = 1330
                self.match(SQLiteParser.K_RECURSIVE)

            self.state = 1333
            self.cte_table_name()
            self.state = 1334
            self.match(SQLiteParser.K_AS)
            self.state = 1335
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1336
            self.select_stmt()
            self.state = 1337
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 1338
                self.match(SQLiteParser.COMMA)
                self.state = 1339
                self.cte_table_name()
                self.state = 1340
                self.match(SQLiteParser.K_AS)
                self.state = 1341
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1342
                self.select_stmt()
                self.state = 1343
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_table_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext, 0)

        def k_not(self):
            return self.getTypedRuleContext(SQLiteParser.K_notContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualified_table_name"):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualified_table_name"):
                listener.exitQualified_table_name(self)

    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
            if la_ == 1:
                self.state = 1350
                self.database_name()
                self.state = 1351
                self.match(SQLiteParser.DOT)

            self.state = 1355
            self.table_name()
            self.state = 1362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_INDEXED]:
                self.state = 1356
                self.match(SQLiteParser.K_INDEXED)
                self.state = 1357
                self.match(SQLiteParser.K_BY)
                self.state = 1358
                self.index_name()
                pass
            elif token in [SQLiteParser.K_NOT]:
                self.state = 1359
                self.k_not()
                self.state = 1360
                self.match(SQLiteParser.K_INDEXED)
                pass
            elif token in [
                SQLiteParser.EOF,
                SQLiteParser.SCOL,
                SQLiteParser.K_ALTER,
                SQLiteParser.K_ANALYZE,
                SQLiteParser.K_ATTACH,
                SQLiteParser.K_BEGIN,
                SQLiteParser.K_COMMIT,
                SQLiteParser.K_CREATE,
                SQLiteParser.K_DELETE,
                SQLiteParser.K_DETACH,
                SQLiteParser.K_DROP,
                SQLiteParser.K_END,
                SQLiteParser.K_EXPLAIN,
                SQLiteParser.K_INSERT,
                SQLiteParser.K_LIMIT,
                SQLiteParser.K_ORDER,
                SQLiteParser.K_PRAGMA,
                SQLiteParser.K_REINDEX,
                SQLiteParser.K_RELEASE,
                SQLiteParser.K_REPLACE,
                SQLiteParser.K_ROLLBACK,
                SQLiteParser.K_SAVEPOINT,
                SQLiteParser.K_SELECT,
                SQLiteParser.K_SET,
                SQLiteParser.K_UPDATE,
                SQLiteParser.K_VACUUM,
                SQLiteParser.K_VALUES,
                SQLiteParser.K_WHERE,
                SQLiteParser.K_WITH,
                SQLiteParser.UNEXPECTED_CHAR,
            ]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_termContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext, 0)

        def k_asc(self):
            return self.getTypedRuleContext(SQLiteParser.K_ascContext, 0)

        def k_desc(self):
            return self.getTypedRuleContext(SQLiteParser.K_descContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrdering_term"):
                listener.enterOrdering_term(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrdering_term"):
                listener.exitOrdering_term(self)

    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ordering_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.expr(0)
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_COLLATE:
                self.state = 1365
                self.match(SQLiteParser.K_COLLATE)
                self.state = 1366
                self.collation_name()

            self.state = 1371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_ASC]:
                self.state = 1369
                self.k_asc()
                pass
            elif token in [SQLiteParser.K_DESC]:
                self.state = 1370
                self.k_desc()
                pass
            elif token in [
                SQLiteParser.EOF,
                SQLiteParser.SCOL,
                SQLiteParser.CLOSE_PAR,
                SQLiteParser.COMMA,
                SQLiteParser.K_ALTER,
                SQLiteParser.K_ANALYZE,
                SQLiteParser.K_ATTACH,
                SQLiteParser.K_BEGIN,
                SQLiteParser.K_COMMIT,
                SQLiteParser.K_CREATE,
                SQLiteParser.K_DELETE,
                SQLiteParser.K_DETACH,
                SQLiteParser.K_DROP,
                SQLiteParser.K_END,
                SQLiteParser.K_EXPLAIN,
                SQLiteParser.K_INSERT,
                SQLiteParser.K_LIMIT,
                SQLiteParser.K_PRAGMA,
                SQLiteParser.K_REINDEX,
                SQLiteParser.K_RELEASE,
                SQLiteParser.K_REPLACE,
                SQLiteParser.K_ROLLBACK,
                SQLiteParser.K_SAVEPOINT,
                SQLiteParser.K_SELECT,
                SQLiteParser.K_UPDATE,
                SQLiteParser.K_VACUUM,
                SQLiteParser.K_VALUES,
                SQLiteParser.K_WITH,
                SQLiteParser.UNEXPECTED_CHAR,
            ]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_valueContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLiteParser.String_literalContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragma_value"):
                listener.enterPragma_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragma_value"):
                listener.exitPragma_value(self)

    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_pragma_value)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1375
                self.string_literal()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCommon_table_expression"):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCommon_table_expression"):
                listener.exitCommon_table_expression(self)

    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 96, self.RULE_common_table_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.table_name()
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 1379
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1380
                self.column_name()
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1381
                    self.match(SQLiteParser.COMMA)
                    self.state = 1382
                    self.column_name()
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1388
                self.match(SQLiteParser.CLOSE_PAR)

            self.state = 1392
            self.match(SQLiteParser.K_AS)
            self.state = 1393
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1394
            self.select_stmt()
            self.state = 1395
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_columnContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResult_column"):
                listener.enterResult_column(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResult_column"):
                listener.exitResult_column(self)

    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_result_column)
        self._la = 0  # Token type
        try:
            self.state = 1409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1397
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1398
                self.table_name()
                self.state = 1399
                self.match(SQLiteParser.DOT)
                self.state = 1400
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1402
                self.expr(0)
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    _la == SQLiteParser.K_AS
                    or _la == SQLiteParser.IDENTIFIER
                    or _la == SQLiteParser.STRING_LITERAL
                ):
                    self.state = 1404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_AS:
                        self.state = 1403
                        self.match(SQLiteParser.K_AS)

                    self.state = 1406
                    self.column_alias()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_subqueryContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def database_name(self):
            return self.getTypedRuleContext(SQLiteParser.Database_nameContext, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext, 0)

        def k_not(self):
            return self.getTypedRuleContext(SQLiteParser.K_notContext, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def table_or_subquery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Table_or_subqueryContext, i
                )

        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_or_subquery"):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_or_subquery"):
                listener.exitTable_or_subquery(self)

    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_table_or_subquery)
        self._la = 0  # Token type
        try:
            self.state = 1459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 198, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 188, self._ctx)
                if la_ == 1:
                    self.state = 1411
                    self.database_name()
                    self.state = 1412
                    self.match(SQLiteParser.DOT)

                self.state = 1416
                self.table_name()
                self.state = 1421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
                if la_ == 1:
                    self.state = 1418
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 189, self._ctx)
                    if la_ == 1:
                        self.state = 1417
                        self.match(SQLiteParser.K_AS)

                    self.state = 1420
                    self.table_alias()

                self.state = 1429
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_INDEXED]:
                    self.state = 1423
                    self.match(SQLiteParser.K_INDEXED)
                    self.state = 1424
                    self.match(SQLiteParser.K_BY)
                    self.state = 1425
                    self.index_name()
                    pass
                elif token in [SQLiteParser.K_NOT]:
                    self.state = 1426
                    self.k_not()
                    self.state = 1427
                    self.match(SQLiteParser.K_INDEXED)
                    pass
                elif token in [
                    SQLiteParser.EOF,
                    SQLiteParser.SCOL,
                    SQLiteParser.CLOSE_PAR,
                    SQLiteParser.COMMA,
                    SQLiteParser.K_ALTER,
                    SQLiteParser.K_ANALYZE,
                    SQLiteParser.K_ATTACH,
                    SQLiteParser.K_BEGIN,
                    SQLiteParser.K_COMMIT,
                    SQLiteParser.K_CREATE,
                    SQLiteParser.K_CROSS,
                    SQLiteParser.K_DELETE,
                    SQLiteParser.K_DETACH,
                    SQLiteParser.K_DROP,
                    SQLiteParser.K_END,
                    SQLiteParser.K_EXCEPT,
                    SQLiteParser.K_EXPLAIN,
                    SQLiteParser.K_GROUP,
                    SQLiteParser.K_INNER,
                    SQLiteParser.K_INSERT,
                    SQLiteParser.K_INTERSECT,
                    SQLiteParser.K_JOIN,
                    SQLiteParser.K_LEFT,
                    SQLiteParser.K_LIMIT,
                    SQLiteParser.K_NATURAL,
                    SQLiteParser.K_ON,
                    SQLiteParser.K_ORDER,
                    SQLiteParser.K_PRAGMA,
                    SQLiteParser.K_REINDEX,
                    SQLiteParser.K_RELEASE,
                    SQLiteParser.K_REPLACE,
                    SQLiteParser.K_ROLLBACK,
                    SQLiteParser.K_SAVEPOINT,
                    SQLiteParser.K_SELECT,
                    SQLiteParser.K_UNION,
                    SQLiteParser.K_UPDATE,
                    SQLiteParser.K_USING,
                    SQLiteParser.K_VACUUM,
                    SQLiteParser.K_VALUES,
                    SQLiteParser.K_WHERE,
                    SQLiteParser.K_WITH,
                    SQLiteParser.UNEXPECTED_CHAR,
                ]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
                if la_ == 1:
                    self.state = 1432
                    self.table_or_subquery()
                    self.state = 1437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 1433
                        self.match(SQLiteParser.COMMA)
                        self.state = 1434
                        self.table_or_subquery()
                        self.state = 1439
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1440
                    self.join_clause()
                    pass

                self.state = 1443
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 195, self._ctx)
                if la_ == 1:
                    self.state = 1445
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 194, self._ctx)
                    if la_ == 1:
                        self.state = 1444
                        self.match(SQLiteParser.K_AS)

                    self.state = 1447
                    self.table_alias()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1450
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1451
                self.select_stmt()
                self.state = 1452
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 197, self._ctx)
                if la_ == 1:
                    self.state = 1454
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 196, self._ctx)
                    if la_ == 1:
                        self.state = 1453
                        self.match(SQLiteParser.K_AS)

                    self.state = 1456
                    self.table_alias()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Table_or_subqueryContext, i
                )

        def join_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext, i)

        def join_constraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)

    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.table_or_subquery()
            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                _la == SQLiteParser.COMMA
                or _la == SQLiteParser.K_CROSS
                or (
                    (((_la - 87)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 87))
                        & (
                            (1 << (SQLiteParser.K_INNER - 87))
                            | (1 << (SQLiteParser.K_JOIN - 87))
                            | (1 << (SQLiteParser.K_LEFT - 87))
                            | (1 << (SQLiteParser.K_NATURAL - 87))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1462
                self.join_operator()
                self.state = 1463
                self.table_or_subquery()
                self.state = 1464
                self.join_constraint()
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_operatorContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def k_join(self):
            return self.getTypedRuleContext(SQLiteParser.K_joinContext, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def k_left(self):
            return self.getTypedRuleContext(SQLiteParser.K_leftContext, 0)

        def k_inner(self):
            return self.getTypedRuleContext(SQLiteParser.K_innerContext, 0)

        def k_cross(self):
            return self.getTypedRuleContext(SQLiteParser.K_crossContext, 0)

        def k_outer(self):
            return self.getTypedRuleContext(SQLiteParser.K_outerContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoin_operator"):
                listener.enterJoin_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoin_operator"):
                listener.exitJoin_operator(self)

    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_join_operator)
        self._la = 0  # Token type
        try:
            self.state = 1484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1471
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [
                SQLiteParser.K_CROSS,
                SQLiteParser.K_INNER,
                SQLiteParser.K_JOIN,
                SQLiteParser.K_LEFT,
                SQLiteParser.K_NATURAL,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_NATURAL:
                    self.state = 1472
                    self.match(SQLiteParser.K_NATURAL)

                self.state = 1481
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.K_LEFT]:
                    self.state = 1475
                    self.k_left()
                    self.state = 1477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SQLiteParser.K_OUTER:
                        self.state = 1476
                        self.k_outer()

                    pass
                elif token in [SQLiteParser.K_INNER]:
                    self.state = 1479
                    self.k_inner()
                    pass
                elif token in [SQLiteParser.K_CROSS]:
                    self.state = 1480
                    self.k_cross()
                    pass
                elif token in [SQLiteParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1483
                self.k_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_constraintContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoin_constraint"):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoin_constraint"):
                listener.exitJoin_constraint(self)

    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_join_constraint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_ON]:
                self.state = 1486
                self.match(SQLiteParser.K_ON)
                self.state = 1487
                self.expr(0)
                pass
            elif token in [SQLiteParser.K_USING]:
                self.state = 1488
                self.match(SQLiteParser.K_USING)
                self.state = 1489
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1490
                self.column_name()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1491
                    self.match(SQLiteParser.COMMA)
                    self.state = 1492
                    self.column_name()
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1498
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [
                SQLiteParser.EOF,
                SQLiteParser.SCOL,
                SQLiteParser.CLOSE_PAR,
                SQLiteParser.COMMA,
                SQLiteParser.K_ALTER,
                SQLiteParser.K_ANALYZE,
                SQLiteParser.K_ATTACH,
                SQLiteParser.K_BEGIN,
                SQLiteParser.K_COMMIT,
                SQLiteParser.K_CREATE,
                SQLiteParser.K_CROSS,
                SQLiteParser.K_DELETE,
                SQLiteParser.K_DETACH,
                SQLiteParser.K_DROP,
                SQLiteParser.K_END,
                SQLiteParser.K_EXCEPT,
                SQLiteParser.K_EXPLAIN,
                SQLiteParser.K_GROUP,
                SQLiteParser.K_INNER,
                SQLiteParser.K_INSERT,
                SQLiteParser.K_INTERSECT,
                SQLiteParser.K_JOIN,
                SQLiteParser.K_LEFT,
                SQLiteParser.K_LIMIT,
                SQLiteParser.K_NATURAL,
                SQLiteParser.K_ORDER,
                SQLiteParser.K_PRAGMA,
                SQLiteParser.K_REINDEX,
                SQLiteParser.K_RELEASE,
                SQLiteParser.K_REPLACE,
                SQLiteParser.K_ROLLBACK,
                SQLiteParser.K_SAVEPOINT,
                SQLiteParser.K_SELECT,
                SQLiteParser.K_UNION,
                SQLiteParser.K_UPDATE,
                SQLiteParser.K_VACUUM,
                SQLiteParser.K_VALUES,
                SQLiteParser.K_WHERE,
                SQLiteParser.K_WITH,
                SQLiteParser.UNEXPECTED_CHAR,
            ]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_coreContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Select_clauseContext, 0)

        def from_clause(self):
            return self.getTypedRuleContext(SQLiteParser.From_clauseContext, 0)

        def where_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Where_clauseContext, 0)

        def group_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Group_clauseContext, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelect_core"):
                listener.enterSelect_core(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelect_core"):
                listener.exitSelect_core(self)

    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_select_core)
        self._la = 0  # Token type
        try:
            self.state = 1540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1502
                self.select_clause()
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_FROM:
                    self.state = 1503
                    self.from_clause()

                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_WHERE:
                    self.state = 1506
                    self.where_clause()

                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SQLiteParser.K_GROUP:
                    self.state = 1509
                    self.group_clause()

                pass
            elif token in [SQLiteParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1512
                self.match(SQLiteParser.K_VALUES)
                self.state = 1513
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1514
                self.expr(0)
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1515
                    self.match(SQLiteParser.COMMA)
                    self.state = 1516
                    self.expr(0)
                    self.state = 1521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1522
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1523
                    self.match(SQLiteParser.COMMA)
                    self.state = 1524
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1525
                    self.expr(0)
                    self.state = 1530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SQLiteParser.COMMA:
                        self.state = 1526
                        self.match(SQLiteParser.COMMA)
                        self.state = 1527
                        self.expr(0)
                        self.state = 1532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1533
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_operatorContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompound_operator"):
                listener.enterCompound_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompound_operator"):
                listener.exitCompound_operator(self)

    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_compound_operator)
        try:
            self.state = 1547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 213, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.match(SQLiteParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1543
                self.match(SQLiteParser.K_UNION)
                self.state = 1544
                self.match(SQLiteParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1545
                self.match(SQLiteParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1546
                self.match(SQLiteParser.K_EXCEPT)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_table_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext, 0)

        def column_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCte_table_name"):
                listener.enterCte_table_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCte_table_name"):
                listener.exitCte_table_name(self)

    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_cte_table_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.table_name()
            self.state = 1561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.OPEN_PAR:
                self.state = 1550
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1551
                self.column_name()
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1552
                    self.match(SQLiteParser.COMMA)
                    self.state = 1553
                    self.column_name()
                    self.state = 1558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1559
                self.match(SQLiteParser.CLOSE_PAR)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_literal(self):
            return self.getTypedRuleContext(SQLiteParser.Numeric_literalContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)

    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_signed_number)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.PLUS or _la == SQLiteParser.MINUS:
                self.state = 1563
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.PLUS or _la == SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1566
            self.numeric_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_literal(self):
            return self.getTypedRuleContext(SQLiteParser.Numeric_literalContext, 0)

        def string_literal(self):
            return self.getTypedRuleContext(SQLiteParser.String_literalContext, 0)

        def blob_literal(self):
            return self.getTypedRuleContext(SQLiteParser.Blob_literalContext, 0)

        def k_null(self):
            return self.getTypedRuleContext(SQLiteParser.K_nullContext, 0)

        def k_current_time(self):
            return self.getTypedRuleContext(SQLiteParser.K_current_timeContext, 0)

        def k_current_date(self):
            return self.getTypedRuleContext(SQLiteParser.K_current_dateContext, 0)

        def k_current_timestamp(self):
            return self.getTypedRuleContext(SQLiteParser.K_current_timestampContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)

    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_literal_value)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.NUMERIC_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.numeric_literal()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.string_literal()
                pass
            elif token in [SQLiteParser.BLOB_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1570
                self.blob_literal()
                pass
            elif token in [SQLiteParser.K_NULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1571
                self.k_null()
                pass
            elif token in [SQLiteParser.K_CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1572
                self.k_current_time()
                pass
            elif token in [SQLiteParser.K_CURRENT_DATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1573
                self.k_current_date()
                pass
            elif token in [SQLiteParser.K_CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1574
                self.k_current_timestamp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)

    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_unary_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SQLiteParser.PLUS)
                            | (1 << SQLiteParser.MINUS)
                            | (1 << SQLiteParser.TILDE)
                        )
                    )
                    != 0
                )
                or _la == SQLiteParser.K_NOT
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_messageContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterError_message"):
                listener.enterError_message(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitError_message"):
                listener.exitError_message(self)

    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_argumentContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModule_argument"):
                listener.enterModule_argument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModule_argument"):
                listener.exitModule_argument(self)

    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_module_argument)
        try:
            self.state = 1583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 218, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1581
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1582
                self.column_def()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumn_alias"):
                listener.enterColumn_alias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumn_alias"):
                listener.exitColumn_alias(self)

    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_column_alias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            _la = self._input.LA(1)
            if not (
                _la == SQLiteParser.IDENTIFIER or _la == SQLiteParser.STRING_LITERAL
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def result_column(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext, i)

        def k_distinct(self):
            return self.getTypedRuleContext(SQLiteParser.K_distinctContext, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelect_clause"):
                listener.enterSelect_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelect_clause"):
                listener.exitSelect_clause(self)

    def select_clause(self):

        localctx = SQLiteParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_select_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.match(SQLiteParser.K_SELECT)
            self.state = 1590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
            if la_ == 1:
                self.state = 1588
                self.k_distinct()

            elif la_ == 2:
                self.state = 1589
                self.match(SQLiteParser.K_ALL)

            self.state = 1592
            self.result_column()
            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 1593
                self.match(SQLiteParser.COMMA)
                self.state = 1594
                self.result_column()
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def table_or_subquery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(
                    SQLiteParser.Table_or_subqueryContext, i
                )

        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_from_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFrom_clause"):
                listener.enterFrom_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFrom_clause"):
                listener.exitFrom_clause(self)

    def from_clause(self):

        localctx = SQLiteParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_from_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(SQLiteParser.K_FROM)
            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 222, self._ctx)
            if la_ == 1:
                self.state = 1601
                self.table_or_subquery()
                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SQLiteParser.COMMA:
                    self.state = 1602
                    self.match(SQLiteParser.COMMA)
                    self.state = 1603
                    self.table_or_subquery()
                    self.state = 1608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1609
                self.join_clause()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_having_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHaving_clause"):
                listener.enterHaving_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHaving_clause"):
                listener.exitHaving_clause(self)

    def having_clause(self):

        localctx = SQLiteParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self.match(SQLiteParser.K_HAVING)
            self.state = 1613
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def having_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Having_clauseContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_group_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroup_clause"):
                listener.enterGroup_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroup_clause"):
                listener.exitGroup_clause(self)

    def group_clause(self):

        localctx = SQLiteParser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_group_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.match(SQLiteParser.K_GROUP)
            self.state = 1616
            self.match(SQLiteParser.K_BY)
            self.state = 1617
            self.expr(0)
            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 1618
                self.match(SQLiteParser.COMMA)
                self.state = 1619
                self.expr(0)
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_HAVING:
                self.state = 1625
                self.having_clause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_where_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhere_clause"):
                listener.enterWhere_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhere_clause"):
                listener.exitWhere_clause(self)

    def where_clause(self):

        localctx = SQLiteParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(SQLiteParser.K_WHERE)
            self.state = 1629
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def ordering_term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrder_clause"):
                listener.enterOrder_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrder_clause"):
                listener.exitOrder_clause(self)

    def order_clause(self):

        localctx = SQLiteParser.Order_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_order_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(SQLiteParser.K_ORDER)
            self.state = 1632
            self.match(SQLiteParser.K_BY)
            self.state = 1633
            self.ordering_term()
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SQLiteParser.COMMA:
                self.state = 1634
                self.match(SQLiteParser.COMMA)
                self.state = 1635
                self.ordering_term()
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimit_clause"):
                listener.enterLimit_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimit_clause"):
                listener.exitLimit_clause(self)

    def limit_clause(self):

        localctx = SQLiteParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_limit_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(SQLiteParser.K_LIMIT)
            self.state = 1642
            self.expr(0)
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET:
                self.state = 1643
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.COMMA or _la == SQLiteParser.K_OFFSET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1644
                self.expr(0)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Like_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_like_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLike_clause"):
                listener.enterLike_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLike_clause"):
                listener.exitLike_clause(self)

    def like_clause(self):

        localctx = SQLiteParser.Like_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_like_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(SQLiteParser.K_LIKE)
            self.state = 1648
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_clauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext, i)

        def K_WHEN(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_WHEN)
            else:
                return self.getToken(SQLiteParser.K_WHEN, i)

        def K_THEN(self, i: int = None):
            if i is None:
                return self.getTokens(SQLiteParser.K_THEN)
            else:
                return self.getToken(SQLiteParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_case_clause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCase_clause"):
                listener.enterCase_clause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCase_clause"):
                listener.exitCase_clause(self)

    def case_clause(self):

        localctx = SQLiteParser.Case_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_case_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.match(SQLiteParser.K_CASE)
            self.state = 1652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
            if la_ == 1:
                self.state = 1651
                self.expr(0)

            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1654
                self.match(SQLiteParser.K_WHEN)
                self.state = 1655
                self.expr(0)
                self.state = 1656
                self.match(SQLiteParser.K_THEN)
                self.state = 1657
                self.expr(0)
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == SQLiteParser.K_WHEN):
                    break

            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SQLiteParser.K_ELSE:
                self.state = 1663
                self.match(SQLiteParser.K_ELSE)
                self.state = 1664
                self.expr(0)

            self.state = 1667
            self.match(SQLiteParser.K_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_operatorContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SQLiteParser.RULE_binary_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinary_operator"):
                listener.enterBinary_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinary_operator"):
                listener.exitBinary_operator(self)

    def binary_operator(self):

        localctx = SQLiteParser.Binary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_binary_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SQLiteParser.ASSIGN)
                            | (1 << SQLiteParser.STAR)
                            | (1 << SQLiteParser.PLUS)
                            | (1 << SQLiteParser.MINUS)
                            | (1 << SQLiteParser.PIPE2)
                            | (1 << SQLiteParser.DIV)
                            | (1 << SQLiteParser.MOD)
                            | (1 << SQLiteParser.LT2)
                            | (1 << SQLiteParser.GT2)
                            | (1 << SQLiteParser.AMP)
                            | (1 << SQLiteParser.PIPE)
                            | (1 << SQLiteParser.LT)
                            | (1 << SQLiteParser.LT_EQ)
                            | (1 << SQLiteParser.GT)
                            | (1 << SQLiteParser.GT_EQ)
                            | (1 << SQLiteParser.EQ)
                            | (1 << SQLiteParser.NOT_EQ1)
                            | (1 << SQLiteParser.NOT_EQ2)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_distinctContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_distinct

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_distinct"):
                listener.enterK_distinct(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_distinct"):
                listener.exitK_distinct(self)

    def k_distinct(self):

        localctx = SQLiteParser.K_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_k_distinct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self.match(SQLiteParser.K_DISTINCT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_allContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_all

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_all"):
                listener.enterK_all(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_all"):
                listener.exitK_all(self)

    def k_all(self):

        localctx = SQLiteParser.K_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_k_all)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.match(SQLiteParser.K_ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_andContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_and

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_and"):
                listener.enterK_and(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_and"):
                listener.exitK_and(self)

    def k_and(self):

        localctx = SQLiteParser.K_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_k_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.match(SQLiteParser.K_AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_orContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_or

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_or"):
                listener.enterK_or(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_or"):
                listener.exitK_or(self)

    def k_or(self):

        localctx = SQLiteParser.K_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_k_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.match(SQLiteParser.K_OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_ascContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_asc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_asc"):
                listener.enterK_asc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_asc"):
                listener.exitK_asc(self)

    def k_asc(self):

        localctx = SQLiteParser.K_ascContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_k_asc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.match(SQLiteParser.K_ASC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_betweenContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_between

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_between"):
                listener.enterK_between(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_between"):
                listener.exitK_between(self)

    def k_between(self):

        localctx = SQLiteParser.K_betweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_k_between)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.match(SQLiteParser.K_BETWEEN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_naturalContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_natural

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_natural"):
                listener.enterK_natural(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_natural"):
                listener.exitK_natural(self)

    def k_natural(self):

        localctx = SQLiteParser.K_naturalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_k_natural)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.match(SQLiteParser.K_NATURAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_leftContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_left

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_left"):
                listener.enterK_left(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_left"):
                listener.exitK_left(self)

    def k_left(self):

        localctx = SQLiteParser.K_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_k_left)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1685
            self.match(SQLiteParser.K_LEFT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_outerContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_outer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_outer"):
                listener.enterK_outer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_outer"):
                listener.exitK_outer(self)

    def k_outer(self):

        localctx = SQLiteParser.K_outerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_k_outer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.match(SQLiteParser.K_OUTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_innerContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_inner

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_inner"):
                listener.enterK_inner(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_inner"):
                listener.exitK_inner(self)

    def k_inner(self):

        localctx = SQLiteParser.K_innerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_k_inner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.match(SQLiteParser.K_INNER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_crossContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_cross

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_cross"):
                listener.enterK_cross(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_cross"):
                listener.exitK_cross(self)

    def k_cross(self):

        localctx = SQLiteParser.K_crossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_k_cross)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.match(SQLiteParser.K_CROSS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_joinContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_join

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_join"):
                listener.enterK_join(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_join"):
                listener.exitK_join(self)

    def k_join(self):

        localctx = SQLiteParser.K_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_k_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.match(SQLiteParser.K_JOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_current_dateContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_current_date

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_current_date"):
                listener.enterK_current_date(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_current_date"):
                listener.exitK_current_date(self)

    def k_current_date(self):

        localctx = SQLiteParser.K_current_dateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_k_current_date)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.match(SQLiteParser.K_CURRENT_DATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_current_timeContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_current_time

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_current_time"):
                listener.enterK_current_time(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_current_time"):
                listener.exitK_current_time(self)

    def k_current_time(self):

        localctx = SQLiteParser.K_current_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_k_current_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(SQLiteParser.K_CURRENT_TIME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_current_timestampContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_current_timestamp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_current_timestamp"):
                listener.enterK_current_timestamp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_current_timestamp"):
                listener.exitK_current_timestamp(self)

    def k_current_timestamp(self):

        localctx = SQLiteParser.K_current_timestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_k_current_timestamp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.match(SQLiteParser.K_CURRENT_TIMESTAMP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_nullContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_null

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_null"):
                listener.enterK_null(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_null"):
                listener.exitK_null(self)

    def k_null(self):

        localctx = SQLiteParser.K_nullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_k_null)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.match(SQLiteParser.K_NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_literalContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_numeric_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumeric_literal"):
                listener.enterNumeric_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumeric_literal"):
                listener.exitNumeric_literal(self)

    def numeric_literal(self):

        localctx = SQLiteParser.Numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_numeric_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_string_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_literal"):
                listener.enterString_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_literal"):
                listener.exitString_literal(self)

    def string_literal(self):

        localctx = SQLiteParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Blob_literalContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_blob_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlob_literal"):
                listener.enterBlob_literal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlob_literal"):
                listener.exitBlob_literal(self)

    def blob_literal(self):

        localctx = SQLiteParser.Blob_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_blob_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.match(SQLiteParser.BLOB_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_descContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_desc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_desc"):
                listener.enterK_desc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_desc"):
                listener.exitK_desc(self)

    def k_desc(self):

        localctx = SQLiteParser.K_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_k_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.match(SQLiteParser.K_DESC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_isContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_is

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_is"):
                listener.enterK_is(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_is"):
                listener.exitK_is(self)

    def k_is(self):

        localctx = SQLiteParser.K_isContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_k_is)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.match(SQLiteParser.K_IS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_inContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_in

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_in"):
                listener.enterK_in(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_in"):
                listener.exitK_in(self)

    def k_in(self):

        localctx = SQLiteParser.K_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_k_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.match(SQLiteParser.K_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_notContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_not

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_not"):
                listener.enterK_not(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_not"):
                listener.exitK_not(self)

    def k_not(self):

        localctx = SQLiteParser.K_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_k_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.match(SQLiteParser.K_NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class K_existsContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_k_exists

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterK_exists"):
                listener.enterK_exists(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitK_exists"):
                listener.exitK_exists(self)

    def k_exists(self):

        localctx = SQLiteParser.K_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_k_exists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.match(SQLiteParser.K_EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SQLiteParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SQLiteParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SQLiteParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SQLiteParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SQLiteParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SQLiteParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(SQLiteParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SQLiteParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SQLiteParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SQLiteParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SQLiteParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SQLiteParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SQLiteParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SQLiteParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SQLiteParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SQLiteParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SQLiteParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SQLiteParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SQLiteParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SQLiteParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SQLiteParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SQLiteParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SQLiteParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SQLiteParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SQLiteParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SQLiteParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SQLiteParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SQLiteParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SQLiteParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SQLiteParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SQLiteParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SQLiteParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SQLiteParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SQLiteParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SQLiteParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(SQLiteParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SQLiteParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SQLiteParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SQLiteParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(SQLiteParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SQLiteParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SQLiteParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SQLiteParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SQLiteParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SQLiteParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(SQLiteParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SQLiteParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SQLiteParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SQLiteParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(SQLiteParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SQLiteParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(SQLiteParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SQLiteParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SQLiteParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SQLiteParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SQLiteParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SQLiteParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SQLiteParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SQLiteParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SQLiteParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SQLiteParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SQLiteParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SQLiteParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SQLiteParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SQLiteParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SQLiteParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SQLiteParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SQLiteParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(SQLiteParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SQLiteParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SQLiteParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SQLiteParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(SQLiteParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SQLiteParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SQLiteParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(SQLiteParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SQLiteParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(SQLiteParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SQLiteParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SQLiteParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SQLiteParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SQLiteParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(SQLiteParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(SQLiteParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SQLiteParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(SQLiteParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SQLiteParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SQLiteParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SQLiteParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SQLiteParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SQLiteParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SQLiteParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SQLiteParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SQLiteParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SQLiteParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SQLiteParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(SQLiteParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SQLiteParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SQLiteParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SQLiteParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SQLiteParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SQLiteParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SQLiteParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SQLiteParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SQLiteParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SQLiteParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(SQLiteParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SQLiteParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SQLiteParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(SQLiteParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SQLiteParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SQLiteParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SQLiteParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SQLiteParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SQLiteParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SQLiteParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SQLiteParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SQLiteParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SQLiteParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(SQLiteParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SQLiteParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)

    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_keyword)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 25)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 25))
                        & (
                            (1 << (SQLiteParser.K_ABORT - 25))
                            | (1 << (SQLiteParser.K_ACTION - 25))
                            | (1 << (SQLiteParser.K_ADD - 25))
                            | (1 << (SQLiteParser.K_AFTER - 25))
                            | (1 << (SQLiteParser.K_ALL - 25))
                            | (1 << (SQLiteParser.K_ALTER - 25))
                            | (1 << (SQLiteParser.K_ANALYZE - 25))
                            | (1 << (SQLiteParser.K_AND - 25))
                            | (1 << (SQLiteParser.K_AS - 25))
                            | (1 << (SQLiteParser.K_ASC - 25))
                            | (1 << (SQLiteParser.K_ATTACH - 25))
                            | (1 << (SQLiteParser.K_AUTOINCREMENT - 25))
                            | (1 << (SQLiteParser.K_BEFORE - 25))
                            | (1 << (SQLiteParser.K_BEGIN - 25))
                            | (1 << (SQLiteParser.K_BETWEEN - 25))
                            | (1 << (SQLiteParser.K_BY - 25))
                            | (1 << (SQLiteParser.K_CASCADE - 25))
                            | (1 << (SQLiteParser.K_CASE - 25))
                            | (1 << (SQLiteParser.K_CAST - 25))
                            | (1 << (SQLiteParser.K_CHECK - 25))
                            | (1 << (SQLiteParser.K_COLLATE - 25))
                            | (1 << (SQLiteParser.K_COLUMN - 25))
                            | (1 << (SQLiteParser.K_COMMIT - 25))
                            | (1 << (SQLiteParser.K_CONFLICT - 25))
                            | (1 << (SQLiteParser.K_CONSTRAINT - 25))
                            | (1 << (SQLiteParser.K_CREATE - 25))
                            | (1 << (SQLiteParser.K_CROSS - 25))
                            | (1 << (SQLiteParser.K_CURRENT_DATE - 25))
                            | (1 << (SQLiteParser.K_CURRENT_TIME - 25))
                            | (1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 25))
                            | (1 << (SQLiteParser.K_DATABASE - 25))
                            | (1 << (SQLiteParser.K_DEFAULT - 25))
                            | (1 << (SQLiteParser.K_DEFERRABLE - 25))
                            | (1 << (SQLiteParser.K_DEFERRED - 25))
                            | (1 << (SQLiteParser.K_DELETE - 25))
                            | (1 << (SQLiteParser.K_DESC - 25))
                            | (1 << (SQLiteParser.K_DETACH - 25))
                            | (1 << (SQLiteParser.K_DISTINCT - 25))
                            | (1 << (SQLiteParser.K_DROP - 25))
                            | (1 << (SQLiteParser.K_EACH - 25))
                            | (1 << (SQLiteParser.K_ELSE - 25))
                            | (1 << (SQLiteParser.K_END - 25))
                            | (1 << (SQLiteParser.K_ESCAPE - 25))
                            | (1 << (SQLiteParser.K_EXCEPT - 25))
                            | (1 << (SQLiteParser.K_EXCLUSIVE - 25))
                            | (1 << (SQLiteParser.K_EXISTS - 25))
                            | (1 << (SQLiteParser.K_EXPLAIN - 25))
                            | (1 << (SQLiteParser.K_FAIL - 25))
                            | (1 << (SQLiteParser.K_FOR - 25))
                            | (1 << (SQLiteParser.K_FOREIGN - 25))
                            | (1 << (SQLiteParser.K_FROM - 25))
                            | (1 << (SQLiteParser.K_FULL - 25))
                            | (1 << (SQLiteParser.K_GLOB - 25))
                            | (1 << (SQLiteParser.K_GROUP - 25))
                            | (1 << (SQLiteParser.K_HAVING - 25))
                            | (1 << (SQLiteParser.K_IF - 25))
                            | (1 << (SQLiteParser.K_IGNORE - 25))
                            | (1 << (SQLiteParser.K_IMMEDIATE - 25))
                            | (1 << (SQLiteParser.K_IN - 25))
                            | (1 << (SQLiteParser.K_INDEX - 25))
                            | (1 << (SQLiteParser.K_INDEXED - 25))
                            | (1 << (SQLiteParser.K_INITIALLY - 25))
                            | (1 << (SQLiteParser.K_INNER - 25))
                            | (1 << (SQLiteParser.K_INSERT - 25))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 89)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 89))
                        & (
                            (1 << (SQLiteParser.K_INSTEAD - 89))
                            | (1 << (SQLiteParser.K_INTERSECT - 89))
                            | (1 << (SQLiteParser.K_INTO - 89))
                            | (1 << (SQLiteParser.K_IS - 89))
                            | (1 << (SQLiteParser.K_ISNULL - 89))
                            | (1 << (SQLiteParser.K_JOIN - 89))
                            | (1 << (SQLiteParser.K_KEY - 89))
                            | (1 << (SQLiteParser.K_LEFT - 89))
                            | (1 << (SQLiteParser.K_LIKE - 89))
                            | (1 << (SQLiteParser.K_LIMIT - 89))
                            | (1 << (SQLiteParser.K_MATCH - 89))
                            | (1 << (SQLiteParser.K_NATURAL - 89))
                            | (1 << (SQLiteParser.K_NO - 89))
                            | (1 << (SQLiteParser.K_NOT - 89))
                            | (1 << (SQLiteParser.K_NOTNULL - 89))
                            | (1 << (SQLiteParser.K_NULL - 89))
                            | (1 << (SQLiteParser.K_OF - 89))
                            | (1 << (SQLiteParser.K_OFFSET - 89))
                            | (1 << (SQLiteParser.K_ON - 89))
                            | (1 << (SQLiteParser.K_OR - 89))
                            | (1 << (SQLiteParser.K_ORDER - 89))
                            | (1 << (SQLiteParser.K_OUTER - 89))
                            | (1 << (SQLiteParser.K_PLAN - 89))
                            | (1 << (SQLiteParser.K_PRAGMA - 89))
                            | (1 << (SQLiteParser.K_PRIMARY - 89))
                            | (1 << (SQLiteParser.K_QUERY - 89))
                            | (1 << (SQLiteParser.K_RAISE - 89))
                            | (1 << (SQLiteParser.K_RECURSIVE - 89))
                            | (1 << (SQLiteParser.K_REFERENCES - 89))
                            | (1 << (SQLiteParser.K_REGEXP - 89))
                            | (1 << (SQLiteParser.K_REINDEX - 89))
                            | (1 << (SQLiteParser.K_RELEASE - 89))
                            | (1 << (SQLiteParser.K_RENAME - 89))
                            | (1 << (SQLiteParser.K_REPLACE - 89))
                            | (1 << (SQLiteParser.K_RESTRICT - 89))
                            | (1 << (SQLiteParser.K_RIGHT - 89))
                            | (1 << (SQLiteParser.K_ROLLBACK - 89))
                            | (1 << (SQLiteParser.K_ROW - 89))
                            | (1 << (SQLiteParser.K_SAVEPOINT - 89))
                            | (1 << (SQLiteParser.K_SELECT - 89))
                            | (1 << (SQLiteParser.K_SET - 89))
                            | (1 << (SQLiteParser.K_TABLE - 89))
                            | (1 << (SQLiteParser.K_TEMP - 89))
                            | (1 << (SQLiteParser.K_TEMPORARY - 89))
                            | (1 << (SQLiteParser.K_THEN - 89))
                            | (1 << (SQLiteParser.K_TO - 89))
                            | (1 << (SQLiteParser.K_TRANSACTION - 89))
                            | (1 << (SQLiteParser.K_TRIGGER - 89))
                            | (1 << (SQLiteParser.K_UNION - 89))
                            | (1 << (SQLiteParser.K_UNIQUE - 89))
                            | (1 << (SQLiteParser.K_UPDATE - 89))
                            | (1 << (SQLiteParser.K_USING - 89))
                            | (1 << (SQLiteParser.K_VACUUM - 89))
                            | (1 << (SQLiteParser.K_VALUES - 89))
                            | (1 << (SQLiteParser.K_VIEW - 89))
                            | (1 << (SQLiteParser.K_VIRTUAL - 89))
                            | (1 << (SQLiteParser.K_WHEN - 89))
                            | (1 << (SQLiteParser.K_WHERE - 89))
                            | (1 << (SQLiteParser.K_WITH - 89))
                            | (1 << (SQLiteParser.K_WITHOUT - 89))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)

    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_name"):
                listener.enterFunction_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_name"):
                listener.exitFunction_name(self)

    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_database_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatabase_name"):
                listener.enterDatabase_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatabase_name"):
                listener.exitDatabase_name(self)

    def database_name(self):

        localctx = SQLiteParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)

    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_index_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_or_index_name"):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_or_index_name"):
                listener.exitTable_or_index_name(self)

    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_table_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNew_table_name"):
                listener.enterNew_table_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNew_table_name"):
                listener.exitNew_table_name(self)

    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)

    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collation_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCollation_name"):
                listener.enterCollation_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCollation_name"):
                listener.exitCollation_name(self)

    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_tableContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForeign_table"):
                listener.enterForeign_table(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForeign_table"):
                listener.exitForeign_table(self)

    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1737
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)

    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrigger_name"):
                listener.enterTrigger_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrigger_name"):
                listener.exitTrigger_name(self)

    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterView_name"):
                listener.enterView_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitView_name"):
                listener.exitView_name(self)

    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModule_name"):
                listener.enterModule_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModule_name"):
                listener.exitModule_name(self)

    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragma_name"):
                listener.enterPragma_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragma_name"):
                listener.exitPragma_name(self)

    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSavepoint_name"):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSavepoint_name"):
                listener.exitSavepoint_name(self)

    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable_alias"):
                listener.enterTable_alias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable_alias"):
                listener.exitTable_alias(self)

    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTransaction_name"):
                listener.enterTransaction_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTransaction_name"):
                listener.exitTransaction_name(self)

    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_nameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAny_name"):
                listener.enterAny_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAny_name"):
                listener.exitAny_name(self)

    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_any_name)
        try:
            self.state = 1762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1755
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [
                SQLiteParser.K_ABORT,
                SQLiteParser.K_ACTION,
                SQLiteParser.K_ADD,
                SQLiteParser.K_AFTER,
                SQLiteParser.K_ALL,
                SQLiteParser.K_ALTER,
                SQLiteParser.K_ANALYZE,
                SQLiteParser.K_AND,
                SQLiteParser.K_AS,
                SQLiteParser.K_ASC,
                SQLiteParser.K_ATTACH,
                SQLiteParser.K_AUTOINCREMENT,
                SQLiteParser.K_BEFORE,
                SQLiteParser.K_BEGIN,
                SQLiteParser.K_BETWEEN,
                SQLiteParser.K_BY,
                SQLiteParser.K_CASCADE,
                SQLiteParser.K_CASE,
                SQLiteParser.K_CAST,
                SQLiteParser.K_CHECK,
                SQLiteParser.K_COLLATE,
                SQLiteParser.K_COLUMN,
                SQLiteParser.K_COMMIT,
                SQLiteParser.K_CONFLICT,
                SQLiteParser.K_CONSTRAINT,
                SQLiteParser.K_CREATE,
                SQLiteParser.K_CROSS,
                SQLiteParser.K_CURRENT_DATE,
                SQLiteParser.K_CURRENT_TIME,
                SQLiteParser.K_CURRENT_TIMESTAMP,
                SQLiteParser.K_DATABASE,
                SQLiteParser.K_DEFAULT,
                SQLiteParser.K_DEFERRABLE,
                SQLiteParser.K_DEFERRED,
                SQLiteParser.K_DELETE,
                SQLiteParser.K_DESC,
                SQLiteParser.K_DETACH,
                SQLiteParser.K_DISTINCT,
                SQLiteParser.K_DROP,
                SQLiteParser.K_EACH,
                SQLiteParser.K_ELSE,
                SQLiteParser.K_END,
                SQLiteParser.K_ESCAPE,
                SQLiteParser.K_EXCEPT,
                SQLiteParser.K_EXCLUSIVE,
                SQLiteParser.K_EXISTS,
                SQLiteParser.K_EXPLAIN,
                SQLiteParser.K_FAIL,
                SQLiteParser.K_FOR,
                SQLiteParser.K_FOREIGN,
                SQLiteParser.K_FROM,
                SQLiteParser.K_FULL,
                SQLiteParser.K_GLOB,
                SQLiteParser.K_GROUP,
                SQLiteParser.K_HAVING,
                SQLiteParser.K_IF,
                SQLiteParser.K_IGNORE,
                SQLiteParser.K_IMMEDIATE,
                SQLiteParser.K_IN,
                SQLiteParser.K_INDEX,
                SQLiteParser.K_INDEXED,
                SQLiteParser.K_INITIALLY,
                SQLiteParser.K_INNER,
                SQLiteParser.K_INSERT,
                SQLiteParser.K_INSTEAD,
                SQLiteParser.K_INTERSECT,
                SQLiteParser.K_INTO,
                SQLiteParser.K_IS,
                SQLiteParser.K_ISNULL,
                SQLiteParser.K_JOIN,
                SQLiteParser.K_KEY,
                SQLiteParser.K_LEFT,
                SQLiteParser.K_LIKE,
                SQLiteParser.K_LIMIT,
                SQLiteParser.K_MATCH,
                SQLiteParser.K_NATURAL,
                SQLiteParser.K_NO,
                SQLiteParser.K_NOT,
                SQLiteParser.K_NOTNULL,
                SQLiteParser.K_NULL,
                SQLiteParser.K_OF,
                SQLiteParser.K_OFFSET,
                SQLiteParser.K_ON,
                SQLiteParser.K_OR,
                SQLiteParser.K_ORDER,
                SQLiteParser.K_OUTER,
                SQLiteParser.K_PLAN,
                SQLiteParser.K_PRAGMA,
                SQLiteParser.K_PRIMARY,
                SQLiteParser.K_QUERY,
                SQLiteParser.K_RAISE,
                SQLiteParser.K_RECURSIVE,
                SQLiteParser.K_REFERENCES,
                SQLiteParser.K_REGEXP,
                SQLiteParser.K_REINDEX,
                SQLiteParser.K_RELEASE,
                SQLiteParser.K_RENAME,
                SQLiteParser.K_REPLACE,
                SQLiteParser.K_RESTRICT,
                SQLiteParser.K_RIGHT,
                SQLiteParser.K_ROLLBACK,
                SQLiteParser.K_ROW,
                SQLiteParser.K_SAVEPOINT,
                SQLiteParser.K_SELECT,
                SQLiteParser.K_SET,
                SQLiteParser.K_TABLE,
                SQLiteParser.K_TEMP,
                SQLiteParser.K_TEMPORARY,
                SQLiteParser.K_THEN,
                SQLiteParser.K_TO,
                SQLiteParser.K_TRANSACTION,
                SQLiteParser.K_TRIGGER,
                SQLiteParser.K_UNION,
                SQLiteParser.K_UNIQUE,
                SQLiteParser.K_UPDATE,
                SQLiteParser.K_USING,
                SQLiteParser.K_VACUUM,
                SQLiteParser.K_VALUES,
                SQLiteParser.K_VIEW,
                SQLiteParser.K_VIRTUAL,
                SQLiteParser.K_WHEN,
                SQLiteParser.K_WHERE,
                SQLiteParser.K_WITH,
                SQLiteParser.K_WITHOUT,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1756
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1757
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1758
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1759
                self.any_name()
                self.state = 1760
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx: ExprContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 18)

        if predIndex == 1:
            return self.precpred(self._ctx, 17)

        if predIndex == 2:
            return self.precpred(self._ctx, 15)

        if predIndex == 3:
            return self.precpred(self._ctx, 14)

        if predIndex == 4:
            return self.precpred(self._ctx, 6)

        if predIndex == 5:
            return self.precpred(self._ctx, 5)

        if predIndex == 6:
            return self.precpred(self._ctx, 16)

        if predIndex == 7:
            return self.precpred(self._ctx, 10)

        if predIndex == 8:
            return self.precpred(self._ctx, 9)

        if predIndex == 9:
            return self.precpred(self._ctx, 8)

        if predIndex == 10:
            return self.precpred(self._ctx, 7)

        if predIndex == 11:
            return self.precpred(self._ctx, 4)
